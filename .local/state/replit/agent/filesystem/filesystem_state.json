{"file_contents":{"app.py":{"content":"import streamlit as st\nimport pandas as pd\nimport time\nimport random\nfrom utils.data_manager import DataManager\nfrom utils.recommendation_engine import RecommendationEngine\nfrom utils.weather_manager import WeatherManager\nimport os\n\n# 設定頁面配置\nst.set_page_config(\n    page_title=\"台北運動場地搜尋引擎\",\n    page_icon=\"🏃‍♂️\",\n    layout=\"wide\",\n    initial_sidebar_state=\"collapsed\"\n)\n\n# 自定義灰藍色主題CSS\nst.markdown(\"\"\"\n<style>\n    /* 主背景顏色 */\n    .stApp {\n        background-color: #f8fafb;\n    }\n    \n    /* 區塊背景 */\n    .block-container {\n        background-color: #ecf0f3;\n        padding: 20px;\n        border-radius: 10px;\n        margin-bottom: 20px;\n        box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n    }\n    \n    /* 主標題區域 */\n    .main-header {\n        background: linear-gradient(135deg, #a6bee2 0%, #8fadd9 100%);\n        color: white;\n        padding: 20px;\n        border-radius: 15px;\n        margin-bottom: 30px;\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        flex-wrap: wrap;\n    }\n    \n    .logo-section {\n        display: flex;\n        align-items: center;\n        gap: 15px;\n    }\n    \n    .location-selector-inline {\n        background: rgba(255,255,255,0.2);\n        border-radius: 10px;\n        padding: 10px 15px;\n        min-width: 200px;\n    }\n    \n    .location-selector-inline .stSelectbox > div > div {\n        background-color: rgba(255,255,255,0.9);\n        border-radius: 8px;\n    }\n    \n    /* 天氣區塊特殊樣式 */\n    .weather-block {\n        background: linear-gradient(135deg, #a6bee2 0%, #8fadd9 100%);\n        color: white;\n        padding: 20px;\n        border-radius: 15px;\n        text-align: center;\n        margin-bottom: 30px;\n    }\n    \n    /* 搜尋區塊 */\n    .search-block {\n        background-color: #ecf0f3;\n        padding: 25px;\n        border-radius: 15px;\n        margin-bottom: 30px;\n        box-shadow: 0 2px 6px rgba(0,0,0,0.1);\n    }\n    \n    /* 推薦區塊 */\n    .recommend-block {\n        background-color: #ecf0f3;\n        padding: 25px;\n        border-radius: 15px;\n        margin-bottom: 30px;\n        box-shadow: 0 2px 6px rgba(0,0,0,0.1);\n    }\n    \n    /* 運動icon旋轉動畫 */\n    @keyframes rotation {\n        from { transform: rotate(0deg); }\n        to { transform: rotate(360deg); }\n    }\n    \n    /* 動態運動icon */\n    .rotating-icon {\n        animation: rotation 3s infinite linear;\n        display: inline-block;\n        font-size: 24px;\n    }\n    \n    @keyframes rotation {\n        from { transform: rotate(0deg); }\n        to { transform: rotate(360deg); }\n    }\n    \n    /* 應用啟動動畫覆蓋層 */\n    .app-startup-overlay {\n        position: fixed;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        background-color: #a6bee2;\n        z-index: 99999;\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        flex-direction: column;\n        color: white;\n        font-family: 'Arial', sans-serif;\n    }\n    \n    .startup-logo-container {\n        position: relative;\n        display: flex;\n        justify-content: center;\n        align-items: center;\n    }\n    \n    .app-startup-overlay.hidden {\n        opacity: 0;\n        visibility: hidden;\n        transition: opacity 0.8s ease-out, visibility 0.8s ease-out;\n    }\n    \n    /* 啟動logo動畫 */\n    .startup-logo {\n        max-width: 450vw;\n        max-height: 450vh;\n        width: auto;\n        height: auto;\n        animation: logoFadeIn 1.5s ease-out;\n        position: relative;\n    }\n    \n    @keyframes logoFadeIn {\n        0% {\n            opacity: 0;\n            transform: scale(0.8) translateY(20px);\n        }\n        100% {\n            opacity: 1;\n            transform: scale(1) translateY(0);\n        }\n    }\n    \n    /* 啟動標題 - 放置在頁面 2/3 位置 */\n    .startup-title-compact {\n        position: fixed;\n        top: calc(66.67vh - 1.5cm);\n        left: 50%;\n        transform: translateX(-50%);\n        font-size: 1em;\n        font-weight: normal;\n        text-align: center;\n        opacity: 0.9;\n        white-space: nowrap;\n        font-family: 'uoqmunthenkhung', 'Noto Sans TC', 'Microsoft JhengHei', 'PingFang TC', 'Heiti TC', sans-serif;\n        letter-spacing: 2px;\n        text-shadow: 2px 2px 4px rgba(0,0,0,0.3);\n    }\n    \n    /* 字符弹跳动画 - 单个字符依次跳动 */\n    .bounce-char {\n        display: inline-block;\n        animation: charBounceOnce 0.6s ease-in-out;\n        animation-fill-mode: both;\n    }\n    \n    @keyframes charBounceOnce {\n        0% {\n            transform: translateY(0);\n        }\n        50% {\n            transform: translateY(-0.2cm);\n        }\n        100% {\n            transform: translateY(0);\n        }\n    }\n    \n    /* 为每个字符设置不同的动画延迟 - 依次跳动 */\n    .bounce-char:nth-child(1) { animation-delay: 0s; }\n    .bounce-char:nth-child(2) { animation-delay: 0.6s; }\n    .bounce-char:nth-child(3) { animation-delay: 1.2s; }\n    .bounce-char:nth-child(4) { animation-delay: 1.8s; }\n    .bounce-char:nth-child(5) { animation-delay: 2.4s; }\n    .bounce-char:nth-child(6) { animation-delay: 3.0s; }\n    .bounce-char:nth-child(7) { animation-delay: 3.6s; }\n    .bounce-char:nth-child(8) { animation-delay: 4.2s; }\n    .bounce-char:nth-child(9) { animation-delay: 4.8s; }\n    .bounce-char:nth-child(10) { animation-delay: 5.4s; }\n    .bounce-char:nth-child(11) { animation-delay: 6.0s; }\n    .bounce-char:nth-child(12) { animation-delay: 6.6s; }\n    .bounce-char:nth-child(13) { animation-delay: 7.2s; }\n    .bounce-char:nth-child(14) { animation-delay: 7.8s; }\n    .bounce-char:nth-child(15) { animation-delay: 8.4s; }\n    .bounce-char:nth-child(16) { animation-delay: 9.0s; }\n    .bounce-char:nth-child(17) { animation-delay: 9.6s; }\n    .bounce-char:nth-child(18) { animation-delay: 10.2s; }\n    .bounce-char:nth-child(19) { animation-delay: 10.8s; }\n    .bounce-char:nth-child(20) { animation-delay: 11.4s; }\n    .bounce-char:nth-child(21) { animation-delay: 12.0s; }\n    .bounce-char:nth-child(22) { animation-delay: 12.6s; }\n    .bounce-char:nth-child(23) { animation-delay: 13.2s; }\n    .bounce-char:nth-child(24) { animation-delay: 13.8s; }\n    \n    @keyframes titleSlideUp {\n        0% {\n            opacity: 0;\n            transform: translateY(30px);\n        }\n        100% {\n            opacity: 1;\n            transform: translateY(0);\n        }\n    }\n    \n    /* 載入進度動畫 */\n    .startup-loading {\n        display: flex;\n        align-items: center;\n        gap: 15px;\n        animation: loadingFadeIn 2.2s ease-out 0.9s both;\n    }\n    \n    .loading-text {\n        font-size: 1.1em;\n        margin-right: 10px;\n    }\n    \n    .loading-dots {\n        display: flex;\n        gap: 5px;\n    }\n    \n    .loading-dot {\n        width: 8px;\n        height: 8px;\n        background-color: white;\n        border-radius: 50%;\n        animation: dotPulse 1.4s ease-in-out infinite;\n    }\n    \n    .loading-dot:nth-child(1) { animation-delay: 0s; }\n    .loading-dot:nth-child(2) { animation-delay: 0.2s; }\n    .loading-dot:nth-child(3) { animation-delay: 0.4s; }\n    \n    @keyframes dotPulse {\n        0%, 60%, 100% {\n            opacity: 0.3;\n            transform: scale(0.8);\n        }\n        30% {\n            opacity: 1;\n            transform: scale(1);\n        }\n    }\n    \n    @keyframes loadingFadeIn {\n        0% {\n            opacity: 0;\n            transform: translateY(20px);\n        }\n        100% {\n            opacity: 1;\n            transform: translateY(0);\n        }\n    }\n    \n    /* 轉場動畫覆蓋層 */\n    .page-transition-overlay {\n        display: none;\n        position: fixed;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        background-color: rgba(245, 245, 245, 0.95);\n        z-index: 9999;\n        justify-content: center;\n        align-items: center;\n        flex-direction: column;\n    }\n    \n    .page-transition-overlay.show {\n        display: flex;\n    }\n    \n    /* 載入動畫 */\n    .loading-spinner {\n        width: 80px;\n        height: 80px;\n        border: 8px solid #e8e8e8;\n        border-top: 8px solid #9e9e9e;\n        border-radius: 50%;\n        animation: spin 1s linear infinite;\n        margin-bottom: 20px;\n    }\n    \n    @keyframes spin {\n        0% { transform: rotate(0deg); }\n        100% { transform: rotate(360deg); }\n    }\n    \n    /* 隐藏顶部白色条 */\n    header[data-testid=\"stHeader\"] {\n        display: none !important;\n    }\n    \n    .stApp > header {\n        display: none !important;\n    }\n    \n    /* 輸入欄樣式 */\n    .stTextInput > div > div > input {\n        background-color: #f0f0f0;\n        border: 2px solid #9e9e9e;\n        border-radius: 25px;\n        padding: 10px 20px;\n        font-size: 16px;\n    }\n    \n    /* 場館卡片樣式 */\n    .venue-card {\n        background-color: #f8f8f8;\n        border-radius: 10px;\n        padding: 15px;\n        margin: 10px 0;\n        box-shadow: 0 2px 6px rgba(0,0,0,0.1);\n        border-left: 4px solid #9e9e9e;\n    }\n    \n    /* 標題樣式 */\n    h1, h2, h3 {\n        color: #424242;\n    }\n    \n    /* 按鈕點擊效果 */\n    .stButton > button {\n        transition: all 0.3s ease;\n    }\n    \n    .stButton > button:hover {\n        transform: translateY(-2px);\n        box-shadow: 0 4px 8px rgba(0,0,0,0.2);\n    }\n</style>\n\"\"\", unsafe_allow_html=True)\n\n# ===== 启动页面逻辑 =====\n\n# 读取logo文件\nwith open('attached_assets/FM logo_1757941352267.jpg', 'rb') as f:\n    logo_data = f.read()\n\n# 编码为base64\nimport base64\nlogo_base64 = base64.b64encode(logo_data).decode()\n\n# 完整的启动页面HTML - 美丽的动画效果\nstartup_html = f'''\n<div id=\"appStartup\" class=\"app-startup-overlay\" style=\"display: flex !important;\">\n    <div class=\"startup-logo-container\">\n        <img src=\"data:image/jpeg;base64,{logo_base64}\" class=\"startup-logo\" alt=\"Finding Move Logo\">\n    </div>\n    <div class=\"startup-title-compact\">\n        <span class=\"bounce-char\">尋</span><span class=\"bounce-char\">地</span><span class=\"bounce-char\">寳</span><span class=\"bounce-char\"> </span><span class=\"bounce-char\">-</span><span class=\"bounce-char\"> </span><span class=\"bounce-char\">根</span><span class=\"bounce-char\">據</span><span class=\"bounce-char\">您</span><span class=\"bounce-char\">的</span><span class=\"bounce-char\">節</span><span class=\"bounce-char\">奏</span><span class=\"bounce-char\">，</span><span class=\"bounce-char\">找</span><span class=\"bounce-char\">到</span><span class=\"bounce-char\">最</span><span class=\"bounce-char\">適</span><span class=\"bounce-char\">合</span><span class=\"bounce-char\">您</span><span class=\"bounce-char\">的</span><span class=\"bounce-char\">運</span><span class=\"bounce-char\">動</span><span class=\"bounce-char\">場</span><span class=\"bounce-char\">所</span>\n    </div>\n</div>\n\n<script>\n// 3秒后自动隐藏启动画面\nsetTimeout(function() {{\n    var overlay = document.getElementById('appStartup');\n    if (overlay) {{\n        overlay.classList.add('hidden');\n    }}\n}}, 3000);\n</script>\n'''\n\n# 显示启动页面\nst.markdown(startup_html, unsafe_allow_html=True)\n\n# 等待3.5秒显示启动动画\ntime.sleep(3.5)\n\n# 初始化必要的session state（但不强制认证）\nif 'current_sport_icon' not in st.session_state:\n    st.session_state.current_sport_icon = 0\nif 'selected_district' not in st.session_state:\n    st.session_state.selected_district = '中正區'\nif 'user_location' not in st.session_state:\n    st.session_state.user_location = None\n\n# 设置启动完成标志\nst.session_state.startup_done = True\n\n# 自动跳转到主页面\nst.switch_page(\"pages/1_🔍_場地搜尋.py\")","size_bytes":11781},"pyproject.toml":{"content":"[project]\nname = \"repl-nix-workspace\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nrequires-python = \">=3.11\"\ndependencies = [\n    \"folium>=0.20.0\",\n    \"numpy>=2.3.3\",\n    \"pandas>=2.3.2\",\n    \"scikit-learn>=1.7.2\",\n    \"streamlit-folium>=0.25.1\",\n    \"streamlit>=1.49.1\",\n    \"plotly>=6.3.0\",\n    \"psycopg2-binary>=2.9.10\",\n    \"sqlalchemy>=2.0.43\",\n]\n","size_bytes":369},"replit.md":{"content":"# Overview\n\nThis is a Streamlit-based web application for discovering and searching sports venues in Taipei City. The application provides a comprehensive search engine with personalized recommendations, interactive map visualization, and user preference management. Users can find suitable sports facilities through various filtering options including sport type, district, price range, and facilities.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# Recent Changes\n\n**September 15, 2025**: Successfully implemented top-right location selector with auto-positioning:\n- Added fixed position location selector in top-right corner with gray theme design\n- Integrated all 12 Taipei districts dropdown using Streamlit native selectbox component\n- Implemented HTML5 geolocation API with distance calculation to nearest district\n- Added real-time weather data updates based on selected district\n- Fixed pandas compatibility issues (na_last → na_position in sort_values)\n- Resolved accessibility warnings by adding proper selectbox labels\n- Enhanced URL parameter management for state persistence across page reloads\n- Complete end-to-end testing validation with Playwright\n\n**September 13, 2025**: Completed comprehensive sports venue search engine with following features:\n- PostgreSQL database integration with venues, bookings, reviews, and user tables\n- Real-time booking system with availability checking and conflict detection\n- User review and rating system with administrative moderation dashboard\n- Advanced machine learning recommendation algorithms (ML-based, clustering, content-based similarity)\n- Comprehensive venue comparison feature with charts, statistics, and analysis\n- Venue detail pages with complete information, booking forms, and review sections\n- Security improvements: removed hardcoded passwords, using environment variables\n- Enhanced error handling and data validation throughout the application\n\n# System Architecture\n\n## Frontend Architecture\nThe application uses Streamlit as the primary web framework with a multi-page architecture:\n- **Main App (app.py)**: Entry point with user preference settings and overall configuration\n- **Search Page**: Advanced filtering and search functionality for venues\n- **Map View Page**: Interactive map visualization using Folium integration\n\nThe frontend follows a session state management pattern to maintain user preferences and application state across different pages. The layout uses a sidebar for filters and controls with a wide main content area.\n\n## Backend Architecture\nThe system is built with a modular utility-based architecture:\n\n### Core Components\n- **DataManager**: Handles all data operations including loading, filtering, and venue retrieval\n- **RecommendationEngine**: Implements multiple recommendation algorithms using content-based filtering and TF-IDF vectorization\n- **MapUtils**: Provides geographical utilities and coordinate calculations for map functionality\n\n### Data Processing Layer\nThe DataManager supports flexible data loading from multiple sources:\n- JSON files for structured venue data\n- CSV files for tabular data\n- REST API endpoints for dynamic data fetching\n- Environment variable configuration for data source specification\n\n### Recommendation System\nThe RecommendationEngine implements sophisticated recommendation algorithms:\n- Content-based filtering using venue features\n- User preference matching with weighted scoring\n- Diversity and novelty factors to avoid filter bubbles\n- Feedback integration for continuous learning\n\n## Data Storage\n\n**PostgreSQL Database Integration (Updated September 2025)**\n\nThe application now uses a comprehensive PostgreSQL database with the following tables:\n- **venues**: Stores all venue information including name, location, facilities, pricing\n- **reviews**: User-generated reviews and ratings with moderation status\n- **bookings**: Real-time booking records with availability tracking\n- **user_preferences**: User preference data for personalized recommendations\n\nKey features:\n- Real-time availability checking with conflict detection\n- ACID-compliant booking transactions\n- Review moderation workflow with admin dashboard\n- Secure environment-based database configuration\n\n## Geographic Features\n\nMap functionality is built around Taipei City's district system:\n- Predefined district center coordinates for all Taipei districts\n- Color-coded markers for different sport types\n- Boundary calculations for map viewport management\n- Integration with Folium for interactive map rendering\n\n# External Dependencies\n\n## Core Web Framework\n- **Streamlit**: Main web application framework for UI and user interaction\n- **streamlit-folium**: Integration package for embedding Folium maps in Streamlit\n\n## Data Processing\n- **Pandas**: Primary data manipulation and analysis library\n- **NumPy**: Numerical computing support for calculations and array operations\n\n## Machine Learning & Recommendations\n- **scikit-learn**: Machine learning utilities including TfidfVectorizer and cosine similarity calculations for content-based recommendations\n\n## Visualization & Mapping\n- **Folium**: Interactive map generation and visualization library for geographic data display\n\n## Data Sources\n- **Configurable data sources**: Support for JSON files, CSV files, or REST API endpoints\n- **Environment variables**: VENUES_DATA_SOURCE for flexible data source configuration\n- **HTTP requests**: Optional integration for API-based data fetching\n\nThe architecture is designed to be flexible and extensible, allowing for easy integration of additional data sources, recommendation algorithms, and visualization features.","size_bytes":5677},"pages/1_🔍_場地搜尋.py":{"content":"import streamlit as st\nimport pandas as pd\nimport time\nfrom utils.data_manager import DataManager\nfrom utils.recommendation_engine import RecommendationEngine\nfrom utils.weather_manager import WeatherManager\n\nst.set_page_config(\n    page_title=\"Finding Move 尋地寳 \",\n    page_icon=\"🔍\",\n    layout=\"wide\",\n    initial_sidebar_state=\"collapsed\"\n)\n\n# 启动动画逻辑 - 如果是首次访问，显示启动动画\nif 'startup_done' not in st.session_state:\n    # 读取logo文件\n    with open('attached_assets/FM logo_1757941352267.jpg', 'rb') as f:\n        logo_data = f.read()\n    \n    # 编码为base64\n    import base64\n    logo_base64 = base64.b64encode(logo_data).decode()\n    \n    # 显示启动动画\n    startup_html = f'''\n    <div id=\"appStartup\" class=\"app-startup-overlay\" style=\"position: fixed; top: 0; left: 0; width: 100%; height: 100vh; background: linear-gradient(135deg, #a6bee2 0%, #8fadd9 100%); z-index: 99999; display: flex !important; justify-content: center; align-items: center; flex-direction: column; color: white;\">\n        <div style=\"text-align: center;\">\n            <img src=\"data:image/jpeg;base64,{logo_base64}\" style=\"max-width: 300px; max-height: 300px; margin-bottom: 30px; animation: logoFadeIn 1.5s ease-out;\" alt=\"Finding Move Logo\">\n            <div style=\"font-size: 1.2em; font-weight: bold; text-shadow: 2px 2px 4px rgba(0,0,0,0.3);\">\n                <span style=\"display: inline-block; animation: charBounce 0.6s ease-in-out 0s;\">尋</span><span style=\"display: inline-block; animation: charBounce 0.6s ease-in-out 0.1s;\">地</span><span style=\"display: inline-block; animation: charBounce 0.6s ease-in-out 0.2s;\">寳</span>\n                <span style=\"display: inline-block; animation: charBounce 0.6s ease-in-out 0.3s;\"> - </span>\n                <span style=\"display: inline-block; animation: charBounce 0.6s ease-in-out 0.4s;\">根</span><span style=\"display: inline-block; animation: charBounce 0.6s ease-in-out 0.5s;\">據</span><span style=\"display: inline-block; animation: charBounce 0.6s ease-in-out 0.6s;\">您</span><span style=\"display: inline-block; animation: charBounce 0.6s ease-in-out 0.7s;\">的</span><span style=\"display: inline-block; animation: charBounce 0.6s ease-in-out 0.8s;\">節</span><span style=\"display: inline-block; animation: charBounce 0.6s ease-in-out 0.9s;\">奏</span><span style=\"display: inline-block; animation: charBounce 0.6s ease-in-out 1.0s;\">，</span><span style=\"display: inline-block; animation: charBounce 0.6s ease-in-out 1.1s;\">找</span><span style=\"display: inline-block; animation: charBounce 0.6s ease-in-out 1.2s;\">到</span><span style=\"display: inline-block; animation: charBounce 0.6s ease-in-out 1.3s;\">最</span><span style=\"display: inline-block; animation: charBounce 0.6s ease-in-out 1.4s;\">適</span><span style=\"display: inline-block; animation: charBounce 0.6s ease-in-out 1.5s;\">合</span><span style=\"display: inline-block; animation: charBounce 0.6s ease-in-out 1.6s;\">您</span><span style=\"display: inline-block; animation: charBounce 0.6s ease-in-out 1.7s;\">的</span><span style=\"display: inline-block; animation: charBounce 0.6s ease-in-out 1.8s;\">運</span><span style=\"display: inline-block; animation: charBounce 0.6s ease-in-out 1.9s;\">動</span><span style=\"display: inline-block; animation: charBounce 0.6s ease-in-out 2.0s;\">場</span><span style=\"display: inline-block; animation: charBounce 0.6s ease-in-out 2.1s;\">所</span>\n            </div>\n        </div>\n    </div>\n    \n    <style>\n        @keyframes logoFadeIn {{\n            0% {{ opacity: 0; transform: scale(0.8) translateY(20px); }}\n            100% {{ opacity: 1; transform: scale(1) translateY(0); }}\n        }}\n        @keyframes charBounce {{\n            0% {{ transform: translateY(0); }}\n            50% {{ transform: translateY(-10px); }}\n            100% {{ transform: translateY(0); }}\n        }}\n        header[data-testid=\"stHeader\"] {{ display: none !important; }}\n    </style>\n    \n    <script>\n        // 确保页面完全加载后执行\n        document.addEventListener('DOMContentLoaded', function() {{\n            setTimeout(function() {{\n                var overlay = document.getElementById('appStartup');\n                if (overlay) {{\n                    overlay.style.opacity = '0';\n                    overlay.style.transition = 'opacity 0.8s ease-out';\n                    setTimeout(function() {{\n                        overlay.style.display = 'none';\n                    }}, 800);\n                }}\n            }}, 3000);\n        }});\n        \n        // 备用方案：如果DOM已经加载，立即执行\n        if (document.readyState === 'loading') {{\n            // 如果文档还在加载，等待DOMContentLoaded\n        }} else {{\n            // 如果文档已经加载完成，立即执行定时器\n            setTimeout(function() {{\n                var overlay = document.getElementById('appStartup');\n                if (overlay) {{\n                    overlay.style.opacity = '0';\n                    overlay.style.transition = 'opacity 0.8s ease-out';\n                    setTimeout(function() {{\n                        overlay.style.display = 'none';\n                    }}, 800);\n                }}\n            }}, 3000);\n        }}\n    </script>\n    '''\n    \n    st.markdown(startup_html, unsafe_allow_html=True)\n    \n    # 等待动画播放\n    import time\n    time.sleep(3.5)\n    \n    # 设置标志\n    st.session_state.startup_done = True\n    st.rerun()\n\n# 自定義灰藍色主題CSS\nst.markdown(\"\"\"\n<style>\n    /* 主背景顏色 */\n    .stApp {\n        background-color: #f8fafb;\n    }\n    \n    /* 主標題區域 */\n    .main-header {\n        background: linear-gradient(135deg, #a6bee2 0%, #8fadd9 100%);\n        color: white;\n        padding: 20px;\n        border-radius: 15px;\n        margin-bottom: 30px;\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        flex-wrap: wrap;\n    }\n    \n    .logo-section {\n        display: flex;\n        align-items: center;\n        gap: 15px;\n    }\n    \n    .location-selector-inline {\n        background: rgba(255,255,255,0.2);\n        border-radius: 10px;\n        padding: 10px 15px;\n        min-width: 200px;\n    }\n    \n    .location-selector-inline .stSelectbox > div > div {\n        background-color: rgba(255,255,255,0.9);\n        border-radius: 8px;\n    }\n    \n    /* 天氣區塊特殊樣式 */\n    .weather-block {\n        background: linear-gradient(135deg, #a6bee2 0%, #8fadd9 100%);\n        color: white;\n        padding: 20px;\n        border-radius: 15px;\n        text-align: center;\n        margin-bottom: 30px;\n    }\n    \n    /* 搜尋區塊 */\n    .search-block {\n        background-color: #ecf0f3;\n        padding: 25px;\n        border-radius: 15px;\n        margin-bottom: 30px;\n        box-shadow: 0 2px 6px rgba(0,0,0,0.1);\n    }\n    \n    /* 推薦區塊 */\n    .recommend-block {\n        background-color: #ecf0f3;\n        padding: 25px;\n        border-radius: 15px;\n        margin-bottom: 30px;\n        box-shadow: 0 2px 6px rgba(0,0,0,0.1);\n    }\n    \n    /* 運動icon旋轉動畫 */\n    @keyframes rotation {\n        from { transform: rotate(0deg); }\n        to { transform: rotate(360deg); }\n    }\n    \n    /* 動態運動icon */\n    .rotating-icon {\n        animation: rotation 3s infinite linear;\n        display: inline-block;\n        font-size: 24px;\n    }\n    \n    /* 場館卡片樣式 */\n    .venue-card {\n        background-color: #f8f8f8;\n        border-radius: 10px;\n        padding: 15px;\n        margin: 10px 0;\n        box-shadow: 0 2px 6px rgba(0,0,0,0.1);\n        border-left: 4px solid #9e9e9e;\n    }\n    \n    /* 標題樣式 */\n    h1, h2, h3 {\n        color: #424242;\n    }\n    \n    /* 按鈕點擊效果 */\n    .stButton > button {\n        transition: all 0.3s ease;\n    }\n    \n    .stButton > button:hover {\n        transform: translateY(-2px);\n        box-shadow: 0 4px 8px rgba(0,0,0,0.2);\n    }\n</style>\n\"\"\", unsafe_allow_html=True)\n\n# 確保 session state 已初始化\nif 'data_manager' not in st.session_state:\n    st.session_state.data_manager = DataManager()\n\nif 'recommendation_engine' not in st.session_state:\n    st.session_state.recommendation_engine = RecommendationEngine()\n    \nif 'weather_manager' not in st.session_state:\n    st.session_state.weather_manager = WeatherManager()\n    \nif 'current_sport_icon' not in st.session_state:\n    st.session_state.current_sport_icon = 0\n    \nif 'selected_district' not in st.session_state:\n    st.session_state.selected_district = '中正區'\n    \nif 'user_location' not in st.session_state:\n    st.session_state.user_location = None\n\n# 運動icon列表和動態更新\nsports_icons = [\"🏀\", \"⚽\", \"🏸\", \"🏐\", \"🎾\", \"🏊‍♂️\", \"🏃‍♂️\", \"🚴‍♂️\", \"🏋️‍♂️\", \"🤸‍♂️\"]\n\n# 更新運動icon（每3秒換一次）\nif 'last_icon_update' not in st.session_state:\n    st.session_state.last_icon_update = time.time()\n\ncurrent_time = time.time()\nif current_time - st.session_state.last_icon_update > 3:\n    st.session_state.current_sport_icon = (st.session_state.current_sport_icon + 1) % len(sports_icons)\n    st.session_state.last_icon_update = current_time\n\ncurrent_icon = sports_icons[st.session_state.current_sport_icon]\n\n# ===== 主標題區域與位置選擇器 =====\navailable_districts = ['中正區', '大同區', '中山區', '松山區', '大安區', '萬華區', \n                      '信義區', '士林區', '北投區', '內湖區', '南港區', '文山區']\n\n# 讀取當前選擇的區域\nif hasattr(st, 'query_params') and st.query_params.get('district'):\n    current_district = st.query_params.get('district')\n    if current_district in available_districts:\n        st.session_state.selected_district = current_district\n\n# 簡潔的標題區域 - 移除蓝色背景\nst.markdown(f\"\"\"\n<div style=\"padding: 20px 0; margin-bottom: 20px;\">\n    <div style=\"display: flex; justify-content: space-between; align-items: center; flex-wrap: wrap;\">\n        <div style=\"display: flex; align-items: center; gap: 15px;\">\n            <div style=\"font-size: 2.5em;\">{current_icon}</div>\n            <div>\n                <h1 style=\"margin: 0; font-size: 2em; color: #424242;\">台北運動場地搜尋引擎</h1>\n                <p style=\"margin: 5px 0 0 0; color: #666; font-size: 1.1em;\">找到最適合您的運動場地</p>\n            </div>\n        </div>\n        <div style=\"min-width: 200px;\">\n            {st.session_state.selected_district}\n        </div>\n    </div>\n</div>\n\"\"\", unsafe_allow_html=True)\n\n# 位置选择器（简化版，去除蓝色背景）\ncol1, col2, col3 = st.columns([2, 1, 1])\nwith col2:\n    selected_district = st.selectbox(\n        \"📍 選擇位置\",\n        available_districts,\n        index=available_districts.index(st.session_state.selected_district) if st.session_state.selected_district in available_districts else 0,\n        key=\"district_selector\",\n        help=\"選擇您所在的台北市行政區\"\n    )\n    \n    # 檢查是否有變更\n    if selected_district != st.session_state.selected_district:\n        st.session_state.selected_district = selected_district\n        st.query_params[\"district\"] = selected_district\n        st.rerun()\n\nwith col3:\n    if st.button(\"🎯 自動定位\", help=\"使用GPS自動選擇最近的行政區\"):\n        st.info(\"請在瀏覽器中允許定位權限\")\n\n# ===== 天氣資訊區塊 =====\n# 獲取選擇的區域\nselected_district = st.session_state.selected_district\n\n# 獲取即時天氣資料\nweather_info = st.session_state.weather_manager.get_current_weather(selected_district)\nweather_icon = st.session_state.weather_manager.get_weather_icon(\n    weather_info['weather_description'], \n    weather_info['temperature']\n)\n\n# 根據運動適宜性給出建議\ndef get_exercise_advice(temp, humidity, precipitation):\n    if precipitation > 60:\n        return \"🌧️ 今日有雨，建議室內運動\"\n    elif temp > 35:\n        return \"🌡️ 高溫警告，請注意防曬補水\"\n    elif temp < 15:\n        return \"🧥 氣溫較低，請注意保暖\"\n    elif humidity > 80:\n        return \"💦 濕度較高，運動時多補水\"\n    else:\n        return \"☀️ 今日適合戶外運動\"\n\nexercise_advice = get_exercise_advice(\n    weather_info['temperature'], \n    weather_info['humidity'], \n    weather_info['precipitation_probability']\n)\n\n# ===== 天氣預報區塊 =====\nst.markdown(f\"\"\"\n<div class=\"weather-block\">\n    <h2>🌤️ {selected_district} 即時天氣</h2>\n    <div style=\"display: flex; justify-content: space-around; align-items: center; margin-top: 20px;\">\n        <div>\n            <div style=\"font-size: 3em;\">{weather_icon}</div>\n            <div style=\"font-size: 1.8em; font-weight: bold;\">{weather_info['temperature']}°C</div>\n            <div style=\"font-size: 1.1em;\">{weather_info['weather_description']}</div>\n        </div>\n        <div>\n            <div style=\"font-size: 2em;\">💨</div>\n            <div style=\"font-size: 1.1em;\">{weather_info['wind_direction']} {weather_info['wind_speed']}級</div>\n            <div style=\"font-size: 1.1em;\">濕度 {weather_info['humidity']}%</div>\n        </div>\n        <div>\n            <div style=\"font-size: 2em;\">📍</div>\n            <div style=\"font-weight: bold; font-size: 1.2em;\">台北市</div>\n            <div style=\"font-size: 1.1em; color: #ffeb3b;\">{weather_info['district']}</div>\n        </div>\n    </div>\n    <div style=\"margin-top: 15px; font-size: 1em; background: rgba(255,255,255,0.1); padding: 10px; border-radius: 8px;\">\n        <strong>{exercise_advice}</strong>\n    </div>\n    <div style=\"margin-top: 10px; font-size: 0.9em; display: flex; justify-content: space-between;\">\n        <span>🌡️ 體感 {weather_info['apparent_temperature']}°C</span>\n        <span>🌧️ 降雨 {weather_info['precipitation_probability']}%</span>\n        <span>😊 {weather_info['comfort_index']}</span>\n    </div>\n    <div style=\"margin-top: 8px; font-size: 0.8em; opacity: 0.8; text-align: center;\">\n        更新時間: {weather_info['update_time']}\n    </div>\n</div>\n\"\"\", unsafe_allow_html=True)\n\n# ===== 搜尋功能區塊 =====\nst.markdown('<div class=\"search-block\">', unsafe_allow_html=True)\n\n# 搜尋標題\nst.markdown(f\"\"\"\n<div style=\"text-align: center; margin-bottom: 20px;\">\n    <h2 style=\"color: #424242;\">\n        <span class=\"rotating-icon\">{current_icon}</span>\n        尋找最適合的運動場地\n        <span class=\"rotating-icon\">{current_icon}</span>\n    </h2>\n</div>\n\"\"\", unsafe_allow_html=True)\n\n# 搜尋輸入欄\nsearch_col1, search_col2 = st.columns([4, 1])\n\nwith search_col1:\n    search_placeholder = f\"{current_icon} 輸入場地名稱、運動類型或地區...\"\n    search_query = st.text_input(\"搜尋\", placeholder=search_placeholder, label_visibility=\"collapsed\")\n\nwith search_col2:\n    search_button = st.button(\"🔍\", help=\"開始搜尋\", use_container_width=True, type=\"primary\")\n\n# 篩選條件\nst.markdown('<div style=\"margin-top: 20px;\"><h4 style=\"color: #424242;\">📋 篩選條件</h4></div>', unsafe_allow_html=True)\n\nif 'search_filters' not in st.session_state:\n    st.session_state.search_filters = {\n        'sport_type': [],\n        'district': [],\n        'price_range': [0, 5000],\n        'facilities': [],\n        'rating_min': 0.0\n    }\n\nfilter_col1, filter_col2, filter_col3, filter_col4 = st.columns(4)\n\nwith filter_col1:\n    # 運動類型篩選\n    sport_types = [\"全部\", \"籃球\", \"足球\", \"網球\", \"羽毛球\", \"游泳\", \"健身\", \"跑步\", \"桌球\"]\n    selected_sport = st.selectbox(\"🏃‍♂️ 運動類型\", sport_types)\n\nwith filter_col2:\n    # 地區篩選\n    districts = [\"全部\", \"中正區\", \"大同區\", \"中山區\", \"松山區\", \"大安區\", \"萬華區\", \"信義區\", \"士林區\", \"北投區\", \"內湖區\", \"南港區\", \"文山區\"]\n    selected_district_filter = st.selectbox(\"📍 地區\", districts)\n\nwith filter_col3:\n    # 價格範圍\n    price_range = st.selectbox(\"💰 價格範圍\", [\"全部\", \"免費\", \"NT$1-100\", \"NT$101-300\", \"NT$301-500\", \"NT$500以上\"])\n\nwith filter_col4:\n    # 評分篩選\n    rating_filter = st.selectbox(\"⭐ 評分\", [\"全部\", \"4.5分以上\", \"4.0分以上\", \"3.5分以上\", \"3.0分以上\"])\n\nst.markdown('</div>', unsafe_allow_html=True)\n\n# ===== 推薦場館區塊 =====\nst.markdown('<div class=\"recommend-block\">', unsafe_allow_html=True)\n\nst.markdown('<h2 style=\"color: #424242; text-align: center; margin-bottom: 25px;\">🏆 推薦場館</h2>', unsafe_allow_html=True)\n\n# 獲取推薦場地\nvenues_data = st.session_state.data_manager.get_all_venues()\nif venues_data is not None and not venues_data.empty:\n    # 隨機選擇6個場地作為推薦\n    recommended_venues = venues_data.sample(n=min(6, len(venues_data)))\n    \n    # 以3列2行方式展示推薦場館\n    for i in range(0, len(recommended_venues), 3):\n        cols = st.columns(3)\n        row_venues = recommended_venues.iloc[i:i+3]\n        \n        for j, (_, venue) in enumerate(row_venues.iterrows()):\n            with cols[j]:\n                # 場館圖片（暫時用emoji替代）\n                sport_type = venue.get('sport_type', '運動')\n                venue_icon = \"🏟️\"\n                if \"籃球\" in sport_type:\n                    venue_icon = \"🏀\"\n                elif \"游泳\" in sport_type:\n                    venue_icon = \"🏊‍♂️\"\n                elif \"網球\" in sport_type:\n                    venue_icon = \"🎾\"\n                elif \"足球\" in sport_type:\n                    venue_icon = \"⚽\"\n                elif \"羽毛球\" in sport_type:\n                    venue_icon = \"🏸\"\n                elif \"健身\" in sport_type:\n                    venue_icon = \"🏋️‍♂️\"\n                \n                st.markdown(f\"\"\"\n                <div class=\"venue-card\">\n                    <div style=\"text-align: center; font-size: 3em; margin-bottom: 10px;\">\n                        {venue_icon}\n                    </div>\n                    <div style=\"text-align: center;\">\n                        <h4 style=\"color: #424242; margin-bottom: 8px;\">{venue.get('name', '未知場地')}</h4>\n                        <p style=\"color: #666; font-size: 0.9em; margin-bottom: 5px;\">\n                            📍 {venue.get('district', '未知地區')}\n                        </p>\n                        <p style=\"color: #666; font-size: 0.9em; margin-bottom: 5px;\">\n                            🏃‍♂️ {venue.get('sport_type', '未指定')}\n                        </p>\n                        <div style=\"display: flex; justify-content: space-between; margin-top: 10px;\">\n                            <span style=\"color: #e91e63; font-weight: bold;\">\n                                💰 NT${venue.get('price_per_hour', 0)}/小時\n                            </span>\n                            <span style=\"color: #ff9800; font-weight: bold;\">\n                                ⭐ {venue.get('rating', 0):.1f}\n                            </span>\n                        </div>\n                    </div>\n                </div>\n                \"\"\", unsafe_allow_html=True)\n                \n                # 詳情按鈕\n                if st.button(f\"📋 查看詳情\", key=f\"venue_detail_{venue.get('id', i)}_{j}\", use_container_width=True):\n                    venue_id = venue.get('id')\n                    if venue_id:\n                        st.query_params.id = venue_id\n                        st.switch_page(\"pages/5_🏢_場地詳情.py\")\n\nelse:\n    st.info(\"正在載入場地資料...\")\n\nst.markdown('</div>', unsafe_allow_html=True)\n\n# ===== 原有搜索功能 =====\nst.markdown(\"---\")\nst.title(\"🔍 進階搜尋\")\nst.markdown(\"使用詳細篩選條件找到最適合的運動場地\")\n\n# 側邊欄 - 搜尋篩選器\nwith st.sidebar:\n    st.header(\"🎯 搜尋篩選\")\n    \n    # 運動類型篩選\n    available_sports = st.session_state.data_manager.get_sport_types()\n    if available_sports:\n        selected_sports = st.multiselect(\n            \"運動類型\",\n            available_sports,\n            default=st.session_state.search_filters['sport_type']\n        )\n        st.session_state.search_filters['sport_type'] = selected_sports\n    else:\n        st.info(\"載入運動類型中...\")\n    \n    # 地區篩選\n    available_districts = st.session_state.data_manager.get_districts()\n    if available_districts:\n        selected_districts = st.multiselect(\n            \"地區\",\n            available_districts,\n            default=st.session_state.search_filters['district']\n        )\n        st.session_state.search_filters['district'] = selected_districts\n    else:\n        st.info(\"載入地區資料中...\")\n    \n    # 價格範圍\n    price_range = st.slider(\n        \"價格範圍 (每小時)\",\n        0, 10000,\n        value=st.session_state.search_filters['price_range'],\n        step=100,\n        format=\"NT$%d\"\n    )\n    st.session_state.search_filters['price_range'] = price_range\n    \n    # 設施篩選\n    available_facilities = st.session_state.data_manager.get_facilities()\n    if available_facilities:\n        selected_facilities = st.multiselect(\n            \"設施需求\",\n            available_facilities,\n            default=st.session_state.search_filters['facilities']\n        )\n        st.session_state.search_filters['facilities'] = selected_facilities\n    \n    # 最低評分\n    min_rating = st.slider(\n        \"最低評分\",\n        0.0, 5.0,\n        value=st.session_state.search_filters['rating_min'],\n        step=0.1,\n        format=\"%.1f\"\n    )\n    st.session_state.search_filters['rating_min'] = min_rating\n    \n    # 重置篩選\n    if st.button(\"重置篩選\", use_container_width=True):\n        st.session_state.search_filters = {\n            'sport_type': [],\n            'district': [],\n            'price_range': [0, 5000],\n            'facilities': [],\n            'rating_min': 0.0\n        }\n        st.rerun()\n\n# 主要內容區域\ncol1, col2 = st.columns([2, 1])\n\nwith col1:\n    # 搜尋欄\n    search_col1, search_col2, search_col3 = st.columns([3, 1, 1])\n    \n    with search_col1:\n        search_query = st.text_input(\n            \"搜尋場地\",\n            placeholder=\"輸入場地名稱或關鍵字...\",\n            key=\"venue_search\"\n        )\n    \n    with search_col2:\n        search_button = st.button(\"🔍 搜尋\", type=\"primary\", use_container_width=True)\n    \n    with search_col3:\n        sort_option = st.selectbox(\n            \"排序方式\",\n            [\"評分\", \"價格\", \"距離\", \"名稱\"],\n            key=\"sort_venues\"\n        )\n    \n    # 執行搜尋和篩選\n    if search_button or any(st.session_state.search_filters.values()):\n        # 獲取篩選後的場地\n        filtered_venues = st.session_state.data_manager.get_filtered_venues(\n            sport_types=st.session_state.search_filters['sport_type'],\n            districts=st.session_state.search_filters['district'],\n            price_range=st.session_state.search_filters['price_range'],\n            facilities=st.session_state.search_filters['facilities'],\n            min_rating=st.session_state.search_filters['rating_min'],\n            search_query=search_query if search_button else None\n        )\n        \n        if filtered_venues is not None and not filtered_venues.empty:\n            # 排序\n            if sort_option == \"評分\":\n                filtered_venues = filtered_venues.sort_values('rating', ascending=False, na_position='last')\n            elif sort_option == \"價格\":\n                filtered_venues = filtered_venues.sort_values('price_per_hour', ascending=True, na_position='last')\n            elif sort_option == \"名稱\":\n                filtered_venues = filtered_venues.sort_values('name', ascending=True, na_position='last')\n            \n            st.success(f\"找到 {len(filtered_venues)} 個符合條件的場地\")\n            \n            # 分頁顯示\n            venues_per_page = 10\n            total_pages = (len(filtered_venues) - 1) // venues_per_page + 1\n            \n            if total_pages > 1:\n                page = st.selectbox(f\"頁面 (共 {total_pages} 頁)\", range(1, total_pages + 1))\n                start_idx = (page - 1) * venues_per_page\n                end_idx = start_idx + venues_per_page\n                page_venues = filtered_venues.iloc[start_idx:end_idx]\n            else:\n                page_venues = filtered_venues\n            \n            # 顯示場地列表\n            for idx, venue in page_venues.iterrows():\n                with st.expander(\n                    f\"📍 {venue.get('name', '未知場地')} - {venue.get('district', '未知地區')} \"\n                    f\"{'⭐' * int(venue.get('rating', 0)) if venue.get('rating') else ''}\"\n                ):\n                    venue_detail_col1, venue_detail_col2 = st.columns([2, 1])\n                    \n                    with venue_detail_col1:\n                        st.markdown(f\"**📍 地址:** {venue.get('address', '地址未提供')}\")\n                        st.markdown(f\"**🏃‍♂️ 運動類型:** {venue.get('sport_type', '未指定')}\")\n                        \n                        if venue.get('facilities'):\n                            facilities_list = venue.get('facilities', '').split(',') if isinstance(venue.get('facilities'), str) else venue.get('facilities', [])\n                            st.markdown(f\"**🏢 設施:** {', '.join(facilities_list)}\")\n                        \n                        if venue.get('description'):\n                            st.markdown(f\"**📝 描述:** {venue.get('description')}\")\n                        \n                        if venue.get('contact_phone'):\n                            st.markdown(f\"**📞 聯絡電話:** {venue.get('contact_phone')}\")\n                        \n                        if venue.get('opening_hours'):\n                            st.markdown(f\"**🕒 營業時間:** {venue.get('opening_hours')}\")\n                    \n                    with venue_detail_col2:\n                        # 價格資訊\n                        if venue.get('price_per_hour'):\n                            st.metric(\"每小時費用\", f\"NT${venue.get('price_per_hour')}\")\n                        \n                        # 評分資訊\n                        if venue.get('rating'):\n                            st.metric(\"評分\", f\"{venue.get('rating'):.1f}/5.0\")\n                        \n                        # 操作按鈕\n                        button_col1, button_col2, button_col3 = st.columns(3)\n                        \n                        with button_col1:\n                            if st.button(f\"📋 詳情\", key=f\"detail_{idx}\"):\n                                # 設置選定的場地ID並導航到詳情頁面\n                                venue_id = venue.get('id')\n                                if venue_id:\n                                    st.query_params.id = venue_id\n                                    st.switch_page(\"pages/5_🏢_場地詳情.py\")\n                        \n                        with button_col2:\n                            if st.button(f\"📍 地圖\", key=f\"map_{idx}\"):\n                                st.session_state.selected_venue = venue.to_dict()\n                                st.switch_page(\"pages/2_🗺️_地圖檢視.py\")\n                        \n                        with button_col3:\n                            if st.button(f\"❤️ 收藏\", key=f\"fav_{idx}\"):\n                                # 添加到收藏列表\n                                if 'favorites' not in st.session_state:\n                                    st.session_state.favorites = []\n                                \n                                venue_id = venue.get('id', idx)\n                                if venue_id not in st.session_state.favorites:\n                                    st.session_state.favorites.append(venue_id)\n                                    st.success(\"已加入收藏！\")\n                                else:\n                                    st.info(\"已在收藏列表中\")\n        \n        elif search_query:\n            st.warning(\"未找到符合搜尋條件的場地。請嘗試：\")\n            st.markdown(\"\"\"\n            - 使用不同的關鍵字\n            - 調整篩選條件\n            - 擴大價格或評分範圍\n            \"\"\")\n        else:\n            st.info(\"請設定搜尋條件或輸入關鍵字來搜尋場地\")\n    \n    else:\n        # 顯示所有場地\n        all_venues = st.session_state.data_manager.get_all_venues()\n        \n        if all_venues is not None and not all_venues.empty:\n            st.info(f\"共有 {len(all_venues)} 個場地可供選擇。使用左側篩選器來縮小搜尋範圍。\")\n            \n            # 顯示前10個場地作為預覽\n            preview_venues = all_venues.head(10)\n            \n            for idx, venue in preview_venues.iterrows():\n                with st.container():\n                    venue_preview_col1, venue_preview_col2, venue_preview_col3 = st.columns([3, 1, 1])\n                    \n                    with venue_preview_col1:\n                        st.markdown(f\"**📍 {venue.get('name', '未知場地')}**\")\n                        st.markdown(f\"🏃‍♂️ {venue.get('sport_type', '未指定')} | 📍 {venue.get('district', '未知地區')}\")\n                    \n                    with venue_preview_col2:\n                        if venue.get('price_per_hour'):\n                            st.markdown(f\"💰 NT${venue.get('price_per_hour')}/hr\")\n                        if venue.get('rating'):\n                            st.markdown(f\"⭐ {venue.get('rating'):.1f}\")\n                    \n                    with venue_preview_col3:\n                        if st.button(f\"查看詳情\", key=f\"preview_{idx}\"):\n                            venue_id = venue.get('id')\n                            if venue_id:\n                                st.query_params.id = venue_id\n                                st.switch_page(\"pages/5_🏢_場地詳情.py\")\n                    \n                    st.divider()\n        else:\n            st.error(\"無法載入場地資料。請檢查資料來源或稍後再試。\")\n\nwith col2:\n    st.subheader(\"🎯 搜尋建議\")\n    \n    # 熱門搜尋\n    popular_searches = st.session_state.data_manager.get_popular_searches()\n    if popular_searches:\n        st.markdown(\"**🔥 熱門搜尋:**\")\n        for search_term in popular_searches[:5]:\n            if st.button(f\"🔍 {search_term}\", key=f\"popular_{search_term}\", use_container_width=True):\n                st.session_state.venue_search = search_term\n                st.rerun()\n    \n    # 推薦場地\n    st.subheader(\"💡 推薦場地\")\n    \n    recommendations = st.session_state.recommendation_engine.get_trending_venues()\n    if recommendations is not None and not recommendations.empty:\n        for idx, venue in recommendations.head(5).iterrows():\n            with st.container():\n                st.markdown(f\"**📍 {venue.get('name', '未知場地')}**\")\n                st.markdown(f\"🏃‍♂️ {venue.get('sport_type', '未指定')}\")\n                st.markdown(f\"📍 {venue.get('district', '未知地區')}\")\n                \n                if venue.get('rating'):\n                    stars = \"⭐\" * int(venue.get('rating', 0))\n                    st.markdown(f\"{stars} {venue.get('rating'):.1f}\")\n                \n                if st.button(f\"查看\", key=f\"trend_rec_{idx}\", use_container_width=True):\n                    st.session_state.selected_venue = venue.to_dict()\n                    st.rerun()\n                \n                st.divider()\n    else:\n        st.info(\"推薦場地載入中...\")\n\n# 顯示選中場地的詳細資訊\nif st.session_state.get('selected_venue'):\n    st.markdown(\"---\")\n    st.subheader(f\"📍 {st.session_state.selected_venue.get('name', '場地詳情')}\")\n    \n    detail_col1, detail_col2 = st.columns([2, 1])\n    \n    with detail_col1:\n        venue = st.session_state.selected_venue\n        \n        st.markdown(f\"**📍 地址:** {venue.get('address', '地址未提供')}\")\n        st.markdown(f\"**🏃‍♂️ 運動類型:** {venue.get('sport_type', '未指定')}\")\n        st.markdown(f\"**🏢 所在地區:** {venue.get('district', '未知地區')}\")\n        \n        if venue.get('facilities'):\n            facilities_list = venue.get('facilities', '').split(',') if isinstance(venue.get('facilities'), str) else venue.get('facilities', [])\n            st.markdown(f\"**🏢 設施:** {', '.join(facilities_list)}\")\n        \n        if venue.get('description'):\n            st.markdown(f\"**📝 描述:** {venue.get('description')}\")\n        \n        if venue.get('contact_phone'):\n            st.markdown(f\"**📞 聯絡電話:** {venue.get('contact_phone')}\")\n        \n        if venue.get('opening_hours'):\n            st.markdown(f\"**🕒 營業時間:** {venue.get('opening_hours')}\")\n        \n        if venue.get('website'):\n            st.markdown(f\"**🌐 官方網站:** {venue.get('website')}\")\n    \n    with detail_col2:\n        # 場地評分和價格\n        if venue.get('rating'):\n            st.metric(\"評分\", f\"{venue.get('rating'):.1f}/5.0\")\n        \n        if venue.get('price_per_hour'):\n            st.metric(\"每小時費用\", f\"NT${venue.get('price_per_hour')}\")\n        \n        # 操作按鈕\n        if st.button(\"📍 在地圖上查看\", use_container_width=True):\n            st.switch_page(\"pages/2_🗺️_Map_View.py\")\n        \n        if st.button(\"❤️ 加入收藏\", use_container_width=True):\n            if 'favorites' not in st.session_state:\n                st.session_state.favorites = []\n            \n            venue_id = venue.get('id', venue.get('name'))\n            if venue_id not in st.session_state.favorites:\n                st.session_state.favorites.append(venue_id)\n                st.success(\"已加入收藏！\")\n            else:\n                st.info(\"已在收藏列表中\")\n        \n        if st.button(\"🔄 清除選擇\", use_container_width=True):\n            st.session_state.selected_venue = None\n            st.rerun()\n","size_bytes":34255},"pages/2_🗺️_地圖檢視.py":{"content":"import streamlit as st\nimport folium\nfrom streamlit_folium import st_folium\nimport pandas as pd\nfrom utils.data_manager import DataManager\nfrom utils.map_utils import MapUtils\n\nst.set_page_config(\n    page_title=\"地圖檢視 - 台北運動場地搜尋引擎\",\n    page_icon=\"🗺️\",\n    layout=\"wide\"\n)\n\n# 认证守卫已移除\n\n# 確保 session state 已初始化\nif 'data_manager' not in st.session_state:\n    st.session_state.data_manager = DataManager()\n\nif 'map_utils' not in st.session_state:\n    st.session_state.map_utils = MapUtils()\n\nst.title(\"🗺️ 場地地圖檢視\")\nst.markdown(\"在地圖上探索台北市的運動場地\")\n\n# 側邊欄控制\nwith st.sidebar:\n    st.header(\"🗺️ 地圖控制\")\n    \n    # 地圖中心點選擇\n    map_center_option = st.selectbox(\n        \"地圖中心\",\n        [\"台北市中心\", \"信義區\", \"大安區\", \"中山區\", \"松山區\", \"萬華區\", \"中正區\", \"大同區\", \"士林區\", \"北投區\", \"內湖區\", \"南港區\"],\n        key=\"map_center\"\n    )\n    \n    # 顯示篩選\n    st.subheader(\"📍 顯示篩選\")\n    \n    # 運動類型篩選\n    available_sports = st.session_state.data_manager.get_sport_types()\n    if available_sports:\n        show_sports = st.multiselect(\n            \"顯示運動類型\",\n            available_sports,\n            default=available_sports[:5] if len(available_sports) > 5 else available_sports,\n            key=\"map_sports_filter\"\n        )\n    else:\n        show_sports = []\n        st.info(\"載入運動類型中...\")\n    \n    # 地區篩選\n    available_districts = st.session_state.data_manager.get_districts()\n    if available_districts:\n        show_districts = st.multiselect(\n            \"顯示地區\",\n            available_districts,\n            default=available_districts[:5] if len(available_districts) > 5 else available_districts,\n            key=\"map_districts_filter\"\n        )\n    else:\n        show_districts = []\n        st.info(\"載入地區資料中...\")\n    \n    # 價格範圍篩選\n    price_range = st.slider(\n        \"價格範圍 (每小時)\",\n        0, 10000,\n        value=[0, 5000],\n        step=100,\n        format=\"NT$%d\",\n        key=\"map_price_filter\"\n    )\n    \n    # 評分篩選\n    min_rating = st.slider(\n        \"最低評分\",\n        0.0, 5.0,\n        value=0.0,\n        step=0.1,\n        format=\"%.1f\",\n        key=\"map_rating_filter\"\n    )\n    \n    # 地圖樣式\n    st.subheader(\"🎨 地圖樣式\")\n    map_style = st.selectbox(\n        \"地圖樣式\",\n        [\"OpenStreetMap\", \"CartoDB positron\", \"CartoDB dark_matter\", \"Stamen Terrain\"],\n        key=\"map_style\"\n    )\n    \n    # 顯示選項\n    show_heatmap = st.checkbox(\"顯示熱力圖\", value=False, key=\"show_heatmap\")\n    show_clusters = st.checkbox(\"群集顯示\", value=True, key=\"show_clusters\")\n\n# 主要內容\ncol1, col2 = st.columns([3, 1])\n\nwith col1:\n    # 獲取地圖中心座標\n    map_center = st.session_state.map_utils.get_district_center(map_center_option)\n    \n    # 創建地圖\n    m = folium.Map(\n        location=map_center,\n        zoom_start=12,\n        tiles=None\n    )\n    \n    # 添加地圖圖層\n    tile_mapping = {\n        \"OpenStreetMap\": folium.TileLayer('openstreetmap', attr='OpenStreetMap contributors'),\n        \"CartoDB positron\": folium.TileLayer('cartodbpositron', attr='CartoDB contributors'),\n        \"CartoDB dark_matter\": folium.TileLayer('cartodbdark_matter', attr='CartoDB contributors'),\n        \"Stamen Terrain\": folium.TileLayer('stamenterrain', attr='Map tiles by Stamen Design, under CC BY 3.0. Data by OpenStreetMap, under ODbL.')\n    }\n    \n    if map_style in tile_mapping:\n        tile_mapping[map_style].add_to(m)\n    else:\n        folium.TileLayer('openstreetmap').add_to(m)\n    \n    # 獲取篩選後的場地資料\n    filtered_venues = st.session_state.data_manager.get_filtered_venues(\n        sport_types=show_sports,\n        districts=show_districts,\n        price_range=price_range,\n        min_rating=min_rating\n    )\n    \n    if filtered_venues is not None and not filtered_venues.empty:\n        # 添加場地標記\n        if show_clusters:\n            from folium.plugins import MarkerCluster\n            marker_cluster = MarkerCluster().add_to(m)\n            container = marker_cluster\n        else:\n            container = m\n        \n        # 為不同運動類型設定不同顏色\n        sport_colors = st.session_state.map_utils.get_sport_colors()\n        \n        for idx, venue in filtered_venues.iterrows():\n            if pd.notna(venue.get('latitude')) and pd.notna(venue.get('longitude')):\n                sport_type = venue.get('sport_type', '其他')\n                color = sport_colors.get(sport_type, 'gray')\n                \n                # 建立彈出視窗內容\n                popup_html = f\"\"\"\n                <div style=\"width: 250px;\">\n                    <h4>{venue.get('name', '未知場地')}</h4>\n                    <p><b>🏃‍♂️ 運動類型:</b> {venue.get('sport_type', '未指定')}</p>\n                    <p><b>📍 地址:</b> {venue.get('address', '地址未提供')}</p>\n                    <p><b>🏢 地區:</b> {venue.get('district', '未知地區')}</p>\n                    {f'<p><b>💰 價格:</b> NT${venue.get(\"price_per_hour\")}/hr</p>' if venue.get('price_per_hour') else ''}\n                    {f'<p><b>⭐ 評分:</b> {venue.get(\"rating\"):.1f}/5.0</p>' if venue.get('rating') else ''}\n                    {f'<p><b>🏢 設施:</b> {venue.get(\"facilities\")}</p>' if venue.get('facilities') else ''}\n                </div>\n                \"\"\"\n                \n                folium.Marker(\n                    location=[venue.get('latitude'), venue.get('longitude')],\n                    popup=folium.Popup(popup_html, max_width=300),\n                    tooltip=f\"{venue.get('name', '未知場地')} - {sport_type}\",\n                    icon=folium.Icon(color=color, icon='info-sign')\n                ).add_to(container)\n        \n        # 添加熱力圖（如果勾選）\n        if show_heatmap and not filtered_venues.empty:\n            from folium.plugins import HeatMap\n            \n            heat_data = []\n            for idx, venue in filtered_venues.iterrows():\n                if pd.notna(venue.get('latitude')) and pd.notna(venue.get('longitude')):\n                    # 使用評分作為熱力權重\n                    weight = venue.get('rating', 3.0)\n                    heat_data.append([venue.get('latitude'), venue.get('longitude'), weight])\n            \n            if heat_data:\n                HeatMap(heat_data, radius=15, max_zoom=18).add_to(m)\n        \n        # 顯示地圖\n        map_data = st_folium(m, width=700, height=500, returned_objects=[\"last_clicked\"])\n        \n        # 處理地圖點擊事件\n        if map_data['last_clicked']:\n            clicked_lat = map_data['last_clicked']['lat']\n            clicked_lng = map_data['last_clicked']['lng']\n            \n            # 尋找最近的場地\n            nearest_venue = st.session_state.map_utils.find_nearest_venue(\n                filtered_venues, clicked_lat, clicked_lng\n            )\n            \n            if nearest_venue is not None:\n                st.session_state.selected_venue = nearest_venue\n                \n        # 顯示圖例\n        st.markdown(\"### 🎨 圖例\")\n        legend_cols = st.columns(len(sport_colors))\n        \n        for i, (sport, color) in enumerate(sport_colors.items()):\n            if i < len(legend_cols):\n                with legend_cols[i]:\n                    st.markdown(f\"🔵 **{sport}**\" if color == 'blue' else \n                              f\"🔴 **{sport}**\" if color == 'red' else \n                              f\"🟢 **{sport}**\" if color == 'green' else \n                              f\"🟠 **{sport}**\" if color == 'orange' else \n                              f\"🟣 **{sport}**\" if color == 'purple' else \n                              f\"⚫ **{sport}**\")\n    \n    else:\n        st.warning(\"沒有符合篩選條件的場地資料可顯示在地圖上\")\n        # 顯示空白地圖\n        st_folium(m, width=700, height=500)\n\nwith col2:\n    st.subheader(\"📊 地圖統計\")\n    \n    if filtered_venues is not None and not filtered_venues.empty:\n        # 顯示統計資訊\n        total_venues = len(filtered_venues)\n        avg_rating = filtered_venues['rating'].mean() if 'rating' in filtered_venues.columns else 0\n        avg_price = filtered_venues['price_per_hour'].mean() if 'price_per_hour' in filtered_venues.columns else 0\n        \n        st.metric(\"顯示場地數\", total_venues)\n        if avg_rating > 0:\n            st.metric(\"平均評分\", f\"{avg_rating:.1f}/5.0\")\n        if avg_price > 0:\n            st.metric(\"平均價格\", f\"NT${avg_price:.0f}/hr\")\n        \n        # 按區域統計\n        if 'district' in filtered_venues.columns:\n            district_counts = filtered_venues['district'].value_counts()\n            \n            st.markdown(\"**📍 各區域場地數量:**\")\n            for district, count in district_counts.head(10).items():\n                st.markdown(f\"• {district}: {count} 個場地\")\n        \n        # 按運動類型統計\n        if 'sport_type' in filtered_venues.columns:\n            sport_counts = filtered_venues['sport_type'].value_counts()\n            \n            st.markdown(\"**🏃‍♂️ 運動類型分布:**\")\n            for sport, count in sport_counts.head(10).items():\n                st.markdown(f\"• {sport}: {count} 個場地\")\n    \n    else:\n        st.info(\"選擇篩選條件以顯示統計資訊\")\n    \n    # 快速導航\n    st.subheader(\"🧭 快速導航\")\n    \n    major_districts = [\"信義區\", \"大安區\", \"中山區\", \"松山區\"]\n    for district in major_districts:\n        if st.button(f\"📍 {district}\", key=f\"nav_{district}\", use_container_width=True):\n            # 更新地圖中心到該區域\n            st.session_state.map_center = district\n            st.rerun()\n    \n    # 場地類型快速篩選\n    st.subheader(\"🏃‍♂️ 快速篩選\")\n    \n    if available_sports:\n        popular_sports = available_sports[:6]  # 顯示前6個運動類型\n        for sport in popular_sports:\n            if st.button(f\"🏃‍♂️ {sport}\", key=f\"sport_filter_{sport}\", use_container_width=True):\n                st.session_state.map_sports_filter = [sport]\n                st.rerun()\n\n# 顯示選中場地的詳細資訊\nif st.session_state.get('selected_venue'):\n    st.markdown(\"---\")\n    st.subheader(f\"📍 {st.session_state.selected_venue.get('name', '選中場地')}\")\n    \n    venue = st.session_state.selected_venue\n    \n    info_col1, info_col2, info_col3 = st.columns([2, 1, 1])\n    \n    with info_col1:\n        st.markdown(f\"**📍 地址:** {venue.get('address', '地址未提供')}\")\n        st.markdown(f\"**🏃‍♂️ 運動類型:** {venue.get('sport_type', '未指定')}\")\n        st.markdown(f\"**🏢 地區:** {venue.get('district', '未知地區')}\")\n        \n        if venue.get('contact_phone'):\n            st.markdown(f\"**📞 電話:** {venue.get('contact_phone')}\")\n    \n    with info_col2:\n        if venue.get('rating'):\n            st.metric(\"評分\", f\"{venue.get('rating'):.1f}/5.0\")\n        if venue.get('price_per_hour'):\n            st.metric(\"價格\", f\"NT${venue.get('price_per_hour')}/hr\")\n    \n    with info_col3:\n        if st.button(\"🔍 詳細資訊\", use_container_width=True):\n            st.switch_page(\"pages/1_🔍_Search_Venues.py\")\n        \n        if st.button(\"❤️ 加入收藏\", key=\"map_favorite\", use_container_width=True):\n            if 'favorites' not in st.session_state:\n                st.session_state.favorites = []\n            \n            venue_id = venue.get('id', venue.get('name'))\n            if venue_id not in st.session_state.favorites:\n                st.session_state.favorites.append(venue_id)\n                st.success(\"已加入收藏！\")\n            else:\n                st.info(\"已在收藏列表中\")\n","size_bytes":12004},"pages/3_⭐_個人推薦.py":{"content":"import streamlit as st\nimport pandas as pd\nimport plotly.express as px\nfrom utils.data_manager import DataManager\nfrom utils.recommendation_engine import RecommendationEngine\n\nst.set_page_config(\n    page_title=\"個人推薦 - 台北運動場地搜尋引擎\",\n    page_icon=\"⭐\",\n    layout=\"wide\"\n)\n\n# 认证守卫已移除\n\n# 確保 session state 已初始化\nif 'data_manager' not in st.session_state:\n    st.session_state.data_manager = DataManager()\n\nif 'recommendation_engine' not in st.session_state:\n    st.session_state.recommendation_engine = RecommendationEngine()\n\nif 'user_preferences' not in st.session_state:\n    st.session_state.user_preferences = {\n        'preferred_sports': [],\n        'preferred_districts': [],\n        'price_range': [0, 10000],\n        'search_history': [],\n        'visited_venues': [],\n        'favorite_venues': []\n    }\n\nst.title(\"⭐ 個人化推薦\")\nst.markdown(\"基於您的偏好和行為，為您推薦最適合的運動場地\")\n\n# 側邊欄 - 推薦設定\nwith st.sidebar:\n    st.header(\"🎯 推薦設定\")\n    \n    # 推薦類型選擇\n    recommendation_type = st.selectbox(\n        \"推薦類型\",\n        [\"個人化推薦\", \"機器學習推薦\", \"聚類分析推薦\", \"內容相似推薦\", \"熱門場地\", \"新場地\", \"相似用戶推薦\", \"基於評分推薦\"],\n        key=\"rec_type\"\n    )\n    \n    # 推薦數量\n    num_recommendations = st.slider(\n        \"推薦數量\",\n        5, 20, 10,\n        key=\"num_rec\"\n    )\n    \n    # 多樣性設定\n    diversity_weight = st.slider(\n        \"結果多樣性\",\n        0.0, 1.0, 0.3,\n        step=0.1,\n        help=\"數值越高，推薦結果越多樣化\",\n        key=\"diversity\"\n    )\n    \n    st.subheader(\"📊 偏好分析\")\n    \n    # 顯示用戶偏好統計\n    if st.session_state.user_preferences['search_history']:\n        st.metric(\"搜尋次數\", len(st.session_state.user_preferences['search_history']))\n    \n    if 'favorites' in st.session_state:\n        st.metric(\"收藏場地\", len(st.session_state.favorites))\n    \n    # 更新偏好按鈕\n    if st.button(\"🔄 更新偏好分析\", use_container_width=True):\n        # 重新分析用戶偏好\n        st.session_state.recommendation_engine.update_user_profile(\n            st.session_state.user_preferences\n        )\n        st.success(\"偏好分析已更新！\")\n\n# 主要內容\ntab1, tab2, tab3, tab4 = st.tabs([\"🎯 推薦結果\", \"📊 偏好分析\", \"🔄 推薦解釋\", \"⚙️ 設定調整\"])\n\nwith tab1:\n    st.subheader(f\"🌟 {recommendation_type}\")\n    \n    # 根據選擇的推薦類型獲取推薦結果\n    if recommendation_type == \"個人化推薦\":\n        recommendations = st.session_state.recommendation_engine.get_personalized_recommendations(\n            st.session_state.user_preferences,\n            num_recommendations=num_recommendations,\n            diversity_weight=diversity_weight\n        )\n    elif recommendation_type == \"機器學習推薦\":\n        recommendations = st.session_state.recommendation_engine.get_ml_based_recommendations(\n            st.session_state.user_preferences,\n            num_recommendations=num_recommendations\n        )\n    elif recommendation_type == \"聚類分析推薦\":\n        recommendations = st.session_state.recommendation_engine.get_cluster_based_recommendations(\n            st.session_state.user_preferences,\n            num_recommendations=num_recommendations\n        )\n    elif recommendation_type == \"內容相似推薦\":\n        recommendations = st.session_state.recommendation_engine.get_content_based_ml_recommendations(\n            st.session_state.user_preferences,\n            num_recommendations=num_recommendations\n        )\n    elif recommendation_type == \"熱門場地\":\n        recommendations = st.session_state.recommendation_engine.get_trending_venues(\n            num_recommendations=num_recommendations\n        )\n    elif recommendation_type == \"新場地\":\n        recommendations = st.session_state.recommendation_engine.get_new_venues(\n            num_recommendations=num_recommendations\n        )\n    elif recommendation_type == \"相似用戶推薦\":\n        recommendations = st.session_state.recommendation_engine.get_collaborative_recommendations(\n            st.session_state.user_preferences,\n            num_recommendations=num_recommendations\n        )\n    else:  # 基於評分推薦\n        recommendations = st.session_state.recommendation_engine.get_rating_based_recommendations(\n            st.session_state.user_preferences,\n            num_recommendations=num_recommendations\n        )\n    \n    if recommendations is not None and not recommendations.empty:\n        # 顯示推薦結果\n        for idx, venue in recommendations.iterrows():\n            with st.expander(\n                f\"⭐ {venue.get('name', '未知場地')} - 推薦度: {venue.get('recommendation_score', 0):.1f}\",\n                expanded=idx < 3  # 前3個自動展開\n            ):\n                rec_col1, rec_col2, rec_col3 = st.columns([2, 1, 1])\n                \n                with rec_col1:\n                    st.markdown(f\"**📍 地址:** {venue.get('address', '地址未提供')}\")\n                    st.markdown(f\"**🏃‍♂️ 運動類型:** {venue.get('sport_type', '未指定')}\")\n                    st.markdown(f\"**🏢 地區:** {venue.get('district', '未知地區')}\")\n                    \n                    if venue.get('facilities'):\n                        facilities_list = venue.get('facilities', '').split(',') if isinstance(venue.get('facilities'), str) else venue.get('facilities', [])\n                        st.markdown(f\"**🏢 設施:** {', '.join(facilities_list)}\")\n                    \n                    if venue.get('description'):\n                        st.markdown(f\"**📝 描述:** {venue.get('description')}\")\n                    \n                    # 推薦原因\n                    if venue.get('recommendation_reason'):\n                        st.markdown(f\"**💡 推薦原因:** {venue.get('recommendation_reason')}\")\n                \n                with rec_col2:\n                    # 評分和價格\n                    if venue.get('rating'):\n                        st.metric(\"評分\", f\"{venue.get('rating'):.1f}/5.0\")\n                    \n                    if venue.get('price_per_hour'):\n                        st.metric(\"價格\", f\"NT${venue.get('price_per_hour')}/hr\")\n                    \n                    # 推薦度分數\n                    if venue.get('recommendation_score'):\n                        st.metric(\"推薦度\", f\"{venue.get('recommendation_score'):.1f}/10\")\n                \n                with rec_col3:\n                    # 操作按鈕\n                    if st.button(f\"🔍 詳細資訊\", key=f\"rec_detail_{idx}\"):\n                        st.session_state.selected_venue = venue.to_dict()\n                        st.switch_page(\"pages/1_🔍_Search_Venues.py\")\n                    \n                    if st.button(f\"📍 地圖位置\", key=f\"rec_map_{idx}\"):\n                        st.session_state.selected_venue = venue.to_dict()\n                        st.switch_page(\"pages/2_🗺️_Map_View.py\")\n                    \n                    if st.button(f\"❤️ 收藏\", key=f\"rec_fav_{idx}\"):\n                        if 'favorites' not in st.session_state:\n                            st.session_state.favorites = []\n                        \n                        venue_id = venue.get('id', venue.get('name'))\n                        if venue_id not in st.session_state.favorites:\n                            st.session_state.favorites.append(venue_id)\n                            st.success(\"已加入收藏！\")\n                        else:\n                            st.info(\"已在收藏列表中\")\n                    \n                    # 反饋按鈕\n                    feedback_col1, feedback_col2 = st.columns(2)\n                    with feedback_col1:\n                        if st.button(\"👍\", key=f\"rec_like_{idx}\", help=\"喜歡這個推薦\"):\n                            st.session_state.recommendation_engine.record_feedback(\n                                venue.get('id'), 'like', st.session_state.user_preferences\n                            )\n                            st.success(\"感謝您的反饋！\")\n                    \n                    with feedback_col2:\n                        if st.button(\"👎\", key=f\"rec_dislike_{idx}\", help=\"不喜歡這個推薦\"):\n                            st.session_state.recommendation_engine.record_feedback(\n                                venue.get('id'), 'dislike', st.session_state.user_preferences\n                            )\n                            st.info(\"我們會改善推薦結果\")\n    \n    else:\n        st.warning(\"暫時無法生成推薦結果。請嘗試：\")\n        st.markdown(\"\"\"\n        - 在主頁面設定您的偏好\n        - 搜尋一些場地以建立使用歷史\n        - 收藏一些您喜歡的場地\n        - 調整推薦設定\n        \"\"\")\n\nwith tab2:\n    st.subheader(\"📊 您的偏好分析\")\n    \n    # 偏好運動類型圖表\n    if st.session_state.user_preferences['preferred_sports']:\n        sport_counts = {}\n        for sport in st.session_state.user_preferences['preferred_sports']:\n            sport_counts[sport] = sport_counts.get(sport, 0) + 1\n        \n        if sport_counts:\n            fig_sports = px.pie(\n                values=list(sport_counts.values()),\n                names=list(sport_counts.keys()),\n                title=\"偏好運動類型分布\"\n            )\n            st.plotly_chart(fig_sports, use_container_width=True)\n    else:\n        st.info(\"請在主頁面設定您的運動類型偏好\")\n    \n    # 偏好地區圖表\n    if st.session_state.user_preferences['preferred_districts']:\n        district_counts = {}\n        for district in st.session_state.user_preferences['preferred_districts']:\n            district_counts[district] = district_counts.get(district, 0) + 1\n        \n        if district_counts:\n            fig_districts = px.bar(\n                x=list(district_counts.keys()),\n                y=list(district_counts.values()),\n                title=\"偏好地區分布\",\n                labels={'x': '地區', 'y': '偏好程度'}\n            )\n            st.plotly_chart(fig_districts, use_container_width=True)\n    \n    # 搜尋歷史分析\n    if st.session_state.user_preferences['search_history']:\n        st.subheader(\"🔍 搜尋歷史分析\")\n        \n        search_frequency = {}\n        for search in st.session_state.user_preferences['search_history']:\n            search_frequency[search] = search_frequency.get(search, 0) + 1\n        \n        # 顯示最常搜尋的關鍵字\n        sorted_searches = sorted(search_frequency.items(), key=lambda x: x[1], reverse=True)\n        \n        st.markdown(\"**最常搜尋的關鍵字:**\")\n        for search, count in sorted_searches[:10]:\n            st.markdown(f\"• {search}: {count} 次\")\n    \n    # 收藏場地分析\n    if 'favorites' in st.session_state and st.session_state.favorites:\n        st.subheader(\"❤️ 收藏場地分析\")\n        \n        favorite_venues = st.session_state.data_manager.get_venues_by_ids(st.session_state.favorites)\n        \n        if favorite_venues is not None and not favorite_venues.empty:\n            # 收藏場地的運動類型分布\n            if 'sport_type' in favorite_venues.columns:\n                fav_sport_counts = favorite_venues['sport_type'].value_counts()\n                \n                fig_fav_sports = px.bar(\n                    x=fav_sport_counts.index,\n                    y=fav_sport_counts.values,\n                    title=\"收藏場地運動類型分布\",\n                    labels={'x': '運動類型', 'y': '場地數量'}\n                )\n                st.plotly_chart(fig_fav_sports, use_container_width=True)\n\nwith tab3:\n    st.subheader(\"🔄 推薦演算法說明\")\n    \n    st.markdown(\"\"\"\n    ### 🤖 我們如何為您推薦場地\n    \n    我們的推薦系統結合多種演算法來為您找到最適合的運動場地：\n    \n    #### 1. 🎯 個人化推薦\n    - **基於內容的推薦**: 根據您的運動類型和地區偏好\n    - **協同過濾**: 分析與您相似用戶的選擇\n    - **混合推薦**: 結合多種方法提供最佳結果\n    \n    #### 2. 📊 考慮因素\n    - **偏好匹配度**: 場地是否符合您設定的偏好\n    - **評分權重**: 高評分場地會獲得更高推薦分數\n    - **距離因素**: 考慮您偏好地區的地理位置\n    - **價格適配**: 符合您預算範圍的場地\n    - **設施匹配**: 提供您需要設施的場地\n    \n    #### 3. 🔄 學習機制\n    - **搜尋歷史**: 分析您的搜尋模式\n    - **點擊行為**: 記錄您感興趣的場地類型\n    - **收藏偏好**: 從您的收藏中學習偏好\n    - **反饋學習**: 根據您的點讚/點踩調整推薦\n    \"\"\")\n    \n    # 顯示當前推薦權重\n    if recommendations is not None and not recommendations.empty:\n        st.subheader(\"🔢 當前推薦權重分析\")\n        \n        # 為第一個推薦場地顯示詳細評分分解\n        first_venue = recommendations.iloc[0]\n        \n        st.markdown(f\"**以「{first_venue.get('name', '未知場地')}」為例:**\")\n        \n        weight_col1, weight_col2 = st.columns(2)\n        \n        with weight_col1:\n            st.metric(\"偏好匹配度\", f\"{first_venue.get('preference_match', 0):.1f}/10\")\n            st.metric(\"評分權重\", f\"{first_venue.get('rating_weight', 0):.1f}/10\")\n            st.metric(\"距離評分\", f\"{first_venue.get('distance_score', 0):.1f}/10\")\n        \n        with weight_col2:\n            st.metric(\"價格適配度\", f\"{first_venue.get('price_match', 0):.1f}/10\")\n            st.metric(\"設施匹配度\", f\"{first_venue.get('facility_match', 0):.1f}/10\")\n            st.metric(\"總推薦分數\", f\"{first_venue.get('recommendation_score', 0):.1f}/10\")\n\nwith tab4:\n    st.subheader(\"⚙️ 推薦系統調整\")\n    \n    st.markdown(\"調整以下設定來個人化您的推薦體驗：\")\n    \n    # 推薦權重調整\n    st.markdown(\"#### 🎚️ 推薦因素權重\")\n    \n    weight_col1, weight_col2 = st.columns(2)\n    \n    with weight_col1:\n        preference_weight = st.slider(\n            \"偏好匹配重要性\",\n            0.0, 1.0, 0.3,\n            step=0.1,\n            key=\"pref_weight\"\n        )\n        \n        rating_weight = st.slider(\n            \"評分重要性\",\n            0.0, 1.0, 0.25,\n            step=0.1,\n            key=\"rating_weight\"\n        )\n        \n        price_weight = st.slider(\n            \"價格重要性\",\n            0.0, 1.0, 0.2,\n            step=0.1,\n            key=\"price_weight\"\n        )\n    \n    with weight_col2:\n        distance_weight = st.slider(\n            \"距離重要性\",\n            0.0, 1.0, 0.15,\n            step=0.1,\n            key=\"distance_weight\"\n        )\n        \n        facility_weight = st.slider(\n            \"設施重要性\",\n            0.0, 1.0, 0.1,\n            step=0.1,\n            key=\"facility_weight\"\n        )\n    \n    # 推薦偏好設定\n    st.markdown(\"#### 🎯 推薦偏好\")\n    \n    pref_col1, pref_col2 = st.columns(2)\n    \n    with pref_col1:\n        explore_vs_exploit = st.slider(\n            \"探索 vs 利用\",\n            0.0, 1.0, 0.3,\n            step=0.1,\n            help=\"數值越高越會推薦新類型場地，越低越會推薦熟悉類型\",\n            key=\"explore_exploit\"\n        )\n        \n        popularity_bias = st.slider(\n            \"熱門程度偏好\",\n            0.0, 1.0, 0.4,\n            step=0.1,\n            help=\"數值越高越偏好熱門場地\",\n            key=\"popularity_bias\"\n        )\n    \n    with pref_col2:\n        novelty_preference = st.slider(\n            \"新場地偏好\",\n            0.0, 1.0, 0.2,\n            step=0.1,\n            help=\"數值越高越會推薦新開放的場地\",\n            key=\"novelty_pref\"\n        )\n        \n        serendipity_factor = st.slider(\n            \"意外發現因子\",\n            0.0, 1.0, 0.15,\n            step=0.1,\n            help=\"數值越高越會推薦意想不到但可能喜歡的場地\",\n            key=\"serendipity\"\n        )\n    \n    # 應用設定\n    if st.button(\"💾 應用設定\", type=\"primary\", use_container_width=True):\n        # 更新推薦引擎的權重設定\n        weights = {\n            'preference_weight': preference_weight,\n            'rating_weight': rating_weight,\n            'price_weight': price_weight,\n            'distance_weight': distance_weight,\n            'facility_weight': facility_weight,\n            'explore_vs_exploit': explore_vs_exploit,\n            'popularity_bias': popularity_bias,\n            'novelty_preference': novelty_preference,\n            'serendipity_factor': serendipity_factor\n        }\n        \n        st.session_state.recommendation_engine.update_weights(weights)\n        st.success(\"推薦設定已更新！重新載入頁面以查看新的推薦結果。\")\n        \n        # 自動重新生成推薦\n        st.rerun()\n    \n    # 重置為預設值\n    if st.button(\"🔄 重置為預設值\", use_container_width=True):\n        st.session_state.recommendation_engine.reset_weights()\n        st.success(\"已重置為預設推薦設定！\")\n        st.rerun()\n","size_bytes":17368},"pages/4_⚖️_場地比較.py":{"content":"import streamlit as st\nimport pandas as pd\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nfrom utils.data_manager import DataManager\n\nst.set_page_config(\n    page_title=\"場地比較 - 台北運動場地搜尋引擎\",\n    page_icon=\"⚖️\",\n    layout=\"wide\"\n)\n\n# 认证守卫已移除\n\n# 確保 session state 已初始化\nif 'data_manager' not in st.session_state:\n    st.session_state.data_manager = DataManager()\n\nif 'comparison_venues' not in st.session_state:\n    st.session_state.comparison_venues = []\n\nst.title(\"⚖️ 場地比較分析\")\nst.markdown(\"選擇多個場地進行詳細比較，幫助您做出最佳選擇\")\n\n# 側邊欄 - 場地選擇\nwith st.sidebar:\n    st.header(\"🏟️ 選擇比較場地\")\n    \n    # 載入所有場地\n    venues_data = st.session_state.data_manager.get_all_venues()\n    \n    if venues_data is not None and not venues_data.empty:\n        venue_options = {}\n        for _, venue in venues_data.iterrows():\n            venue_name = venue.get('name', '未知場地')\n            sport_type = venue.get('sport_type', '未知運動')\n            district = venue.get('district', '未知地區')\n            venue_options[f\"{venue_name} ({sport_type} - {district})\"] = venue.get('id')\n        \n        # 多選場地\n        selected_venues = st.multiselect(\n            \"選擇要比較的場地（最多5個）\",\n            options=list(venue_options.keys()),\n            default=[],\n            max_selections=5,\n            key=\"venue_multiselect\"\n        )\n        \n        if selected_venues:\n            # 更新比較列表\n            selected_ids = [venue_options[venue] for venue in selected_venues]\n            st.session_state.comparison_venues = selected_ids\n            \n            st.success(f\"已選擇 {len(selected_venues)} 個場地進行比較\")\n            \n            # 快速操作按鈕\n            if st.button(\"🔄 清空選擇\", use_container_width=True):\n                st.session_state.comparison_venues = []\n                st.rerun()\n        else:\n            st.info(\"請至少選擇2個場地進行比較\")\n    else:\n        st.error(\"無法載入場地資料\")\n\n# 主要內容\nif len(st.session_state.comparison_venues) >= 2:\n    # 獲取比較場地的詳細資料\n    comparison_data = []\n    \n    for venue_id in st.session_state.comparison_venues:\n        venue_info = st.session_state.data_manager.get_venue_by_id(venue_id)\n        if venue_info is not None:\n            comparison_data.append(venue_info)\n    \n    if comparison_data:\n        tab1, tab2, tab3, tab4 = st.tabs([\"📊 基本比較\", \"💰 價格分析\", \"⭐ 評分對比\", \"📍 地理分布\"])\n        \n        with tab1:\n            st.subheader(\"📊 基本資訊比較\")\n            \n            # 創建比較表格\n            comparison_df = pd.DataFrame(comparison_data)\n            \n            # 基本資訊表格\n            basic_info_columns = ['name', 'sport_type', 'district', 'address', 'contact_phone', 'price_per_hour', 'rating']\n            available_columns = [col for col in basic_info_columns if col in comparison_df.columns]\n            \n            if available_columns:\n                display_df = comparison_df[available_columns].copy()\n                \n                # 重新命名列\n                column_mapping = {\n                    'name': '場地名稱',\n                    'sport_type': '運動類型',\n                    'district': '地區',\n                    'address': '地址',\n                    'contact_phone': '電話',\n                    'price_per_hour': '每小時費用(NT$)',\n                    'rating': '評分'\n                }\n                \n                display_df = display_df.rename(columns=column_mapping)\n                \n                # 轉置表格以便比較\n                display_df_transposed = display_df.T\n                display_df_transposed.columns = [f\"場地 {i+1}\" for i in range(len(comparison_data))]\n                \n                st.dataframe(display_df_transposed, use_container_width=True)\n            \n            # 設施比較\n            st.subheader(\"🏢 設施比較\")\n            \n            facilities_comparison = {}\n            for i, venue in enumerate(comparison_data):\n                venue_name = venue.get('name', f'場地 {i+1}')\n                facilities = venue.get('facilities', '')\n                \n                if isinstance(facilities, str) and facilities:\n                    facility_list = [f.strip() for f in facilities.split(',')]\n                elif isinstance(facilities, list):\n                    facility_list = facilities\n                else:\n                    facility_list = []\n                \n                facilities_comparison[venue_name] = facility_list\n            \n            if facilities_comparison:\n                # 創建設施對比表\n                all_facilities = set()\n                for facilities in facilities_comparison.values():\n                    all_facilities.update(facilities)\n                \n                if all_facilities:\n                    facility_matrix = []\n                    for facility in sorted(all_facilities):\n                        row = {'設施': facility}\n                        for venue_name, facilities in facilities_comparison.items():\n                            row[venue_name] = '✅' if facility in facilities else '❌'\n                        facility_matrix.append(row)\n                    \n                    facility_df = pd.DataFrame(facility_matrix)\n                    st.dataframe(facility_df, use_container_width=True)\n                else:\n                    st.info(\"暫無設施資訊可比較\")\n            \n        with tab2:\n            st.subheader(\"💰 價格分析\")\n            \n            # 價格比較圖表\n            price_data = []\n            for venue in comparison_data:\n                price_data.append({\n                    '場地': venue.get('name', '未知場地'),\n                    '每小時費用': venue.get('price_per_hour', 0)\n                })\n            \n            price_df = pd.DataFrame(price_data)\n            \n            if not price_df['每小時費用'].isna().all():\n                col1, col2 = st.columns(2)\n                \n                with col1:\n                    # 柱狀圖\n                    fig_bar = px.bar(\n                        price_df, \n                        x='場地', \n                        y='每小時費用',\n                        title=\"各場地價格比較\",\n                        color='每小時費用',\n                        color_continuous_scale='viridis'\n                    )\n                    fig_bar.update_layout(height=400)\n                    st.plotly_chart(fig_bar, use_container_width=True)\n                \n                with col2:\n                    # 圓餅圖\n                    fig_pie = px.pie(\n                        price_df, \n                        values='每小時費用', \n                        names='場地',\n                        title=\"價格分布比例\"\n                    )\n                    fig_pie.update_layout(height=400)\n                    st.plotly_chart(fig_pie, use_container_width=True)\n                \n                # 價格統計\n                st.subheader(\"💵 價格統計\")\n                col1, col2, col3, col4 = st.columns(4)\n                \n                prices = price_df['每小時費用'].dropna()\n                if not prices.empty:\n                    with col1:\n                        st.metric(\"最高價格\", f\"NT${prices.max():,.0f}\")\n                    with col2:\n                        st.metric(\"最低價格\", f\"NT${prices.min():,.0f}\")\n                    with col3:\n                        st.metric(\"平均價格\", f\"NT${prices.mean():,.0f}\")\n                    with col4:\n                        st.metric(\"價格差距\", f\"NT${prices.max() - prices.min():,.0f}\")\n            else:\n                st.info(\"暫無價格資訊可比較\")\n        \n        with tab3:\n            st.subheader(\"⭐ 評分對比\")\n            \n            # 評分比較\n            rating_data = []\n            for venue in comparison_data:\n                rating = venue.get('rating', 0)\n                if rating and rating > 0:\n                    rating_data.append({\n                        '場地': venue.get('name', '未知場地'),\n                        '評分': rating\n                    })\n            \n            if rating_data:\n                rating_df = pd.DataFrame(rating_data)\n                \n                col1, col2 = st.columns(2)\n                \n                with col1:\n                    # 雷達圖\n                    fig_radar = go.Figure()\n                    \n                    for _, row in rating_df.iterrows():\n                        fig_radar.add_trace(go.Scatterpolar(\n                            r=[row['評分'], row['評分'], row['評分'], row['評分'], row['評分']],\n                            theta=['整體滿意度', '設施品質', '服務態度', '環境整潔', '價格合理'],\n                            fill='toself',\n                            name=row['場地']\n                        ))\n                    \n                    fig_radar.update_layout(\n                        polar=dict(\n                            radialaxis=dict(\n                                visible=True,\n                                range=[0, 5]\n                            )),\n                        showlegend=True,\n                        title=\"評分雷達圖比較\",\n                        height=500\n                    )\n                    st.plotly_chart(fig_radar, use_container_width=True)\n                \n                with col2:\n                    # 評分柱狀圖\n                    fig_rating = px.bar(\n                        rating_df, \n                        x='場地', \n                        y='評分',\n                        title=\"場地評分比較\",\n                        color='評分',\n                        color_continuous_scale='RdYlGn',\n                        range_color=[0, 5]\n                    )\n                    fig_rating.update_layout(height=500)\n                    fig_rating.add_hline(y=rating_df['評分'].mean(), \n                                        line_dash=\"dash\", \n                                        annotation_text=\"平均評分\")\n                    st.plotly_chart(fig_rating, use_container_width=True)\n                \n                # 評分統計\n                st.subheader(\"📊 評分統計\")\n                col1, col2, col3, col4 = st.columns(4)\n                \n                ratings = rating_df['評分']\n                with col1:\n                    st.metric(\"最高評分\", f\"{ratings.max():.1f}/5.0\")\n                with col2:\n                    st.metric(\"最低評分\", f\"{ratings.min():.1f}/5.0\")\n                with col3:\n                    st.metric(\"平均評分\", f\"{ratings.mean():.1f}/5.0\")\n                with col4:\n                    best_venue = rating_df.loc[rating_df['評分'].idxmax(), '場地']\n                    st.metric(\"最佳場地\", best_venue)\n            else:\n                st.info(\"暫無評分資訊可比較\")\n        \n        with tab4:\n            st.subheader(\"📍 地理分布\")\n            \n            # 地區分布\n            district_data = [venue.get('district', '未知地區') for venue in comparison_data]\n            district_counts = pd.Series(district_data).value_counts()\n            \n            col1, col2 = st.columns(2)\n            \n            with col1:\n                # 地區分布圓餅圖\n                fig_district = px.pie(\n                    values=district_counts.values, \n                    names=district_counts.index,\n                    title=\"場地地區分布\"\n                )\n                st.plotly_chart(fig_district, use_container_width=True)\n            \n            with col2:\n                # 地區列表\n                st.subheader(\"🏪 各地區場地\")\n                for district, count in district_counts.items():\n                    st.write(f\"**{district}**: {count} 個場地\")\n                    venues_in_district = [venue.get('name', '未知場地') \n                                        for venue in comparison_data \n                                        if venue.get('district') == district]\n                    for venue_name in venues_in_district:\n                        st.write(f\"  • {venue_name}\")\n        \n        # 綜合推薦\n        st.markdown(\"---\")\n        st.subheader(\"🏆 綜合分析推薦\")\n        \n        # 計算綜合分數\n        recommendation_scores = []\n        for venue in comparison_data:\n            score = 0\n            factors = []\n            \n            # 評分因子 (40%)\n            rating = venue.get('rating', 3.0)\n            if rating:\n                rating_score = rating / 5.0 * 0.4\n                score += rating_score\n                factors.append(f\"評分: {rating:.1f}/5.0\")\n            \n            # 價格因子 (30%) - 價格越低分數越高\n            price = venue.get('price_per_hour', 500)\n            if price:\n                # 假設最高合理價格為1000，價格越低分數越高\n                price_score = max(0, (1000 - price) / 1000) * 0.3\n                score += price_score\n                factors.append(f\"每小時 NT${price:,.0f}\")\n            \n            # 設施因子 (20%)\n            facilities = venue.get('facilities', '')\n            if facilities:\n                facility_count = len(facilities.split(',')) if isinstance(facilities, str) else len(facilities)\n                facility_score = min(facility_count / 10, 1.0) * 0.2  # 假設10個設施為滿分\n                score += facility_score\n                factors.append(f\"{facility_count} 項設施\")\n            \n            # 地理位置因子 (10%)\n            district = venue.get('district', '')\n            popular_districts = ['大安區', '信義區', '中正區']  # 熱門地區\n            if district in popular_districts:\n                score += 0.1\n                factors.append(f\"位於熱門地區 ({district})\")\n            else:\n                factors.append(f\"位於 {district}\")\n            \n            recommendation_scores.append({\n                '場地': venue.get('name', '未知場地'),\n                '綜合分數': score * 100,  # 轉換為百分制\n                '推薦因子': ' • '.join(factors)\n            })\n        \n        # 排序並顯示推薦\n        recommendation_df = pd.DataFrame(recommendation_scores)\n        recommendation_df = recommendation_df.sort_values('綜合分數', ascending=False)\n        \n        for i, (_, venue) in enumerate(recommendation_df.iterrows()):\n            if i == 0:\n                st.success(f\"🥇 **最推薦**: {venue['場地']} (綜合分數: {venue['綜合分數']:.1f})\")\n            elif i == 1:\n                st.info(f\"🥈 **次推薦**: {venue['場地']} (綜合分數: {venue['綜合分數']:.1f})\")\n            elif i == 2:\n                st.warning(f\"🥉 **第三推薦**: {venue['場地']} (綜合分數: {venue['綜合分數']:.1f})\")\n            else:\n                st.write(f\"**{i+1}.** {venue['場地']} (綜合分數: {venue['綜合分數']:.1f})\")\n            \n            st.write(f\"   {venue['推薦因子']}\")\n            st.write(\"\")\n\nelse:\n    # 提示用戶選擇場地\n    st.info(\"請在側邊欄選擇至少2個場地進行比較\")\n    \n    # 顯示快速選擇選項\n    if venues_data is not None and not venues_data.empty:\n        st.subheader(\"🚀 快速選擇\")\n        \n        col1, col2, col3 = st.columns(3)\n        \n        with col1:\n            if st.button(\"🏀 比較籃球場地\", use_container_width=True):\n                basketball_venues = venues_data[venues_data['sport_type'] == '籃球'].head(3)\n                if not basketball_venues.empty:\n                    st.session_state.comparison_venues = basketball_venues['id'].tolist()\n                    st.rerun()\n        \n        with col2:\n            if st.button(\"🏊‍♀️ 比較游泳場地\", use_container_width=True):\n                swimming_venues = venues_data[venues_data['sport_type'] == '游泳'].head(3)\n                if not swimming_venues.empty:\n                    st.session_state.comparison_venues = swimming_venues['id'].tolist()\n                    st.rerun()\n        \n        with col3:\n            if st.button(\"🏃‍♂️ 比較綜合場地\", use_container_width=True):\n                mixed_venues = venues_data[venues_data['sport_type'].isin(['綜合運動', '健身', '多功能'])].head(3)\n                if not mixed_venues.empty:\n                    st.session_state.comparison_venues = mixed_venues['id'].tolist()\n                    st.rerun()\n        \n        # 顯示場地預覽\n        st.subheader(\"🏟️ 可比較場地預覽\")\n        \n        preview_venues = venues_data.head(6)  # 顯示前6個場地作為預覽\n        \n        for i in range(0, len(preview_venues), 3):\n            cols = st.columns(3)\n            for j, (_, venue) in enumerate(preview_venues.iloc[i:i+3].iterrows()):\n                with cols[j]:\n                    st.markdown(f\"**{venue.get('name', '未知場地')}**\")\n                    st.markdown(f\"🏃‍♂️ {venue.get('sport_type', '未知運動')}\")\n                    st.markdown(f\"📍 {venue.get('district', '未知地區')}\")\n                    if venue.get('rating'):\n                        st.markdown(f\"⭐ {venue.get('rating'):.1f}/5.0\")\n                    if venue.get('price_per_hour'):\n                        st.markdown(f\"💰 NT${venue.get('price_per_hour'):,.0f}/小時\")\n\n# 導出功能\nif len(st.session_state.comparison_venues) >= 2 and comparison_data:\n    st.markdown(\"---\")\n    st.subheader(\"📤 導出比較結果\")\n    \n    col1, col2 = st.columns(2)\n    \n    with col1:\n        if st.button(\"📊 生成比較報告\", use_container_width=True):\n            # 生成比較報告的CSV\n            comparison_df = pd.DataFrame(comparison_data)\n            csv_data = comparison_df.to_csv(index=False, encoding='utf-8-sig')\n            \n            st.download_button(\n                label=\"下載比較報告 (CSV)\",\n                data=csv_data,\n                file_name=f\"venue_comparison_{pd.Timestamp.now().strftime('%Y%m%d_%H%M%S')}.csv\",\n                mime=\"text/csv\"\n            )\n    \n    with col2:\n        if st.button(\"🔗 分享比較連結\", use_container_width=True):\n            # 生成分享連結（這裡只是示例，實際需要實現URL參數功能）\n            venue_ids = ','.join(map(str, st.session_state.comparison_venues))\n            share_url = f\"?compare={venue_ids}\"\n            st.code(f\"分享連結: {share_url}\", language=\"text\")\n            st.info(\"複製此連結可直接分享您的比較結果\")","size_bytes":19006},"pages/4_📊_資料分析.py":{"content":"import streamlit as st\nimport pandas as pd\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nfrom utils.data_manager import DataManager\n\nst.set_page_config(\n    page_title=\"資料分析 - 台北運動場地搜尋引擎\",\n    page_icon=\"📊\",\n    layout=\"wide\"\n)\n\n# 確保 session state 已初始化\nif 'data_manager' not in st.session_state:\n    st.session_state.data_manager = DataManager()\n\nst.title(\"📊 場地資料分析\")\nst.markdown(\"深入了解台北市運動場地的分布、趨勢和統計資訊\")\n\n# 側邊欄控制\nwith st.sidebar:\n    st.header(\"📊 分析設定\")\n    \n    # 分析時間範圍（模擬）\n    analysis_period = st.selectbox(\n        \"分析期間\",\n        [\"最近一週\", \"最近一個月\", \"最近三個月\", \"最近一年\", \"全部時間\"],\n        index=2,\n        key=\"analysis_period\"\n    )\n    \n    # 分析維度選擇\n    analysis_dimensions = st.multiselect(\n        \"分析維度\",\n        [\"運動類型\", \"地區分布\", \"價格分析\", \"評分分析\", \"設施分析\", \"使用趨勢\"],\n        default=[\"運動類型\", \"地區分布\", \"價格分析\"],\n        key=\"analysis_dims\"\n    )\n    \n    # 資料視覺化類型\n    viz_type = st.selectbox(\n        \"視覺化類型\",\n        [\"互動式圖表\", \"靜態圖表\", \"儀表板模式\"],\n        key=\"viz_type\"\n    )\n\n# 獲取場地資料\nall_venues = st.session_state.data_manager.get_all_venues()\n\nif all_venues is not None and not all_venues.empty:\n    # 總覽統計\n    st.subheader(\"📈 總覽統計\")\n    \n    overview_col1, overview_col2, overview_col3, overview_col4 = st.columns(4)\n    \n    with overview_col1:\n        total_venues = len(all_venues)\n        st.metric(\"總場地數\", total_venues)\n    \n    with overview_col2:\n        if 'sport_type' in all_venues.columns:\n            unique_sports = all_venues['sport_type'].nunique()\n            st.metric(\"運動類型數\", unique_sports)\n        else:\n            st.metric(\"運動類型數\", \"N/A\")\n    \n    with overview_col3:\n        if 'district' in all_venues.columns:\n            unique_districts = all_venues['district'].nunique()\n            st.metric(\"服務地區數\", unique_districts)\n        else:\n            st.metric(\"服務地區數\", \"N/A\")\n    \n    with overview_col4:\n        if 'price_per_hour' in all_venues.columns:\n            avg_price = all_venues['price_per_hour'].mean()\n            st.metric(\"平均價格\", f\"NT${avg_price:.0f}/hr\" if pd.notna(avg_price) else \"N/A\")\n        else:\n            st.metric(\"平均價格\", \"N/A\")\n    \n    # 分析標籤頁\n    tab1, tab2, tab3, tab4 = st.tabs([\"🏃‍♂️ 運動類型分析\", \"📍 地區分析\", \"💰 價格分析\", \"⭐ 評分與品質分析\"])\n    \n    with tab1:\n        if \"運動類型\" in analysis_dimensions and 'sport_type' in all_venues.columns:\n            st.subheader(\"🏃‍♂️ 運動類型分布分析\")\n            \n            # 運動類型分布圓餅圖\n            sport_counts = all_venues['sport_type'].value_counts()\n            \n            col1, col2 = st.columns([2, 1])\n            \n            with col1:\n                fig_pie = px.pie(\n                    values=sport_counts.values,\n                    names=sport_counts.index,\n                    title=\"運動類型場地數量分布\",\n                    color_discrete_sequence=px.colors.qualitative.Set3\n                )\n                fig_pie.update_traces(textposition='inside', textinfo='percent+label')\n                st.plotly_chart(fig_pie, use_container_width=True)\n            \n            with col2:\n                st.markdown(\"**📊 統計資訊:**\")\n                for sport, count in sport_counts.head(10).items():\n                    percentage = (count / total_venues) * 100\n                    st.markdown(f\"• **{sport}**: {count} 個場地 ({percentage:.1f}%)\")\n            \n            # 運動類型與價格關係\n            if 'price_per_hour' in all_venues.columns:\n                st.subheader(\"💰 各運動類型平均價格\")\n                \n                sport_price_avg = all_venues.groupby('sport_type')['price_per_hour'].agg(['mean', 'count']).reset_index()\n                sport_price_avg = sport_price_avg[sport_price_avg['count'] >= 3]  # 至少3個場地才顯示\n                \n                fig_price = px.bar(\n                    sport_price_avg,\n                    x='sport_type',\n                    y='mean',\n                    title=\"各運動類型平均價格比較\",\n                    labels={'mean': '平均價格 (NT$/hr)', 'sport_type': '運動類型'},\n                    color='mean',\n                    color_continuous_scale='RdYlBu_r'\n                )\n                fig_price.update_layout(xaxis_tickangle=-45)\n                st.plotly_chart(fig_price, use_container_width=True)\n        \n        else:\n            st.info(\"運動類型資料不可用或未選擇此分析維度\")\n    \n    with tab2:\n        if \"地區分布\" in analysis_dimensions and 'district' in all_venues.columns:\n            st.subheader(\"📍 地區分布分析\")\n            \n            # 地區場地數量分布\n            district_counts = all_venues['district'].value_counts()\n            \n            col1, col2 = st.columns([2, 1])\n            \n            with col1:\n                fig_district = px.bar(\n                    x=district_counts.index,\n                    y=district_counts.values,\n                    title=\"各地區場地數量分布\",\n                    labels={'x': '地區', 'y': '場地數量'},\n                    color=district_counts.values,\n                    color_continuous_scale='Blues'\n                )\n                fig_district.update_layout(xaxis_tickangle=-45)\n                st.plotly_chart(fig_district, use_container_width=True)\n            \n            with col2:\n                st.markdown(\"**📊 地區排行:**\")\n                for i, (district, count) in enumerate(district_counts.head(10).items(), 1):\n                    st.markdown(f\"{i}. **{district}**: {count} 個場地\")\n            \n            # 地區與運動類型交叉分析\n            if 'sport_type' in all_venues.columns:\n                st.subheader(\"🎯 地區運動類型分布熱力圖\")\n                \n                # 創建交叉表\n                cross_tab = pd.crosstab(all_venues['district'], all_venues['sport_type'])\n                \n                # 只顯示主要地區和運動類型\n                top_districts = district_counts.head(8).index\n                top_sports = all_venues['sport_type'].value_counts().head(8).index\n                \n                filtered_cross_tab = cross_tab.loc[top_districts, top_sports]\n                \n                fig_heatmap = px.imshow(\n                    filtered_cross_tab.values,\n                    x=filtered_cross_tab.columns,\n                    y=filtered_cross_tab.index,\n                    title=\"地區 × 運動類型分布熱力圖\",\n                    color_continuous_scale='Blues',\n                    aspect='auto'\n                )\n                fig_heatmap.update_layout(\n                    xaxis_title=\"運動類型\",\n                    yaxis_title=\"地區\"\n                )\n                st.plotly_chart(fig_heatmap, use_container_width=True)\n        \n        else:\n            st.info(\"地區資料不可用或未選擇此分析維度\")\n    \n    with tab3:\n        if \"價格分析\" in analysis_dimensions and 'price_per_hour' in all_venues.columns:\n            st.subheader(\"💰 價格分布分析\")\n            \n            # 過濾有效價格資料\n            price_data = all_venues[all_venues['price_per_hour'].notna() & (all_venues['price_per_hour'] > 0)]\n            \n            if not price_data.empty:\n                col1, col2 = st.columns(2)\n                \n                with col1:\n                    # 價格分布直方圖\n                    fig_hist = px.histogram(\n                        price_data,\n                        x='price_per_hour',\n                        nbins=20,\n                        title=\"場地價格分布\",\n                        labels={'price_per_hour': '每小時價格 (NT$)', 'count': '場地數量'},\n                        color_discrete_sequence=['#1f77b4']\n                    )\n                    st.plotly_chart(fig_hist, use_container_width=True)\n                \n                with col2:\n                    # 價格統計\n                    price_stats = price_data['price_per_hour'].describe()\n                    \n                    st.markdown(\"**📊 價格統計:**\")\n                    st.markdown(f\"• **平均價格**: NT${price_stats['mean']:.0f}/hr\")\n                    st.markdown(f\"• **中位數價格**: NT${price_stats['50%']:.0f}/hr\")\n                    st.markdown(f\"• **最低價格**: NT${price_stats['min']:.0f}/hr\")\n                    st.markdown(f\"• **最高價格**: NT${price_stats['max']:.0f}/hr\")\n                    st.markdown(f\"• **標準差**: NT${price_stats['std']:.0f}\")\n                \n                # 價格區間分析\n                st.subheader(\"📊 價格區間分布\")\n                \n                # 定義價格區間\n                price_bins = [0, 200, 400, 600, 800, 1000, float('inf')]\n                price_labels = ['<200', '200-400', '400-600', '600-800', '800-1000', '>1000']\n                \n                price_data['price_range'] = pd.cut(\n                    price_data['price_per_hour'],\n                    bins=price_bins,\n                    labels=price_labels,\n                    include_lowest=True\n                )\n                \n                price_range_counts = price_data['price_range'].value_counts().sort_index()\n                \n                fig_range = px.bar(\n                    x=price_range_counts.index,\n                    y=price_range_counts.values,\n                    title=\"價格區間場地分布\",\n                    labels={'x': '價格區間 (NT$/hr)', 'y': '場地數量'},\n                    color=price_range_counts.values,\n                    color_continuous_scale='Greens'\n                )\n                st.plotly_chart(fig_range, use_container_width=True)\n                \n                # 價格與評分關係\n                if 'rating' in price_data.columns:\n                    st.subheader(\"⭐ 價格與評分關係\")\n                    \n                    rating_data = price_data[price_data['rating'].notna()]\n                    \n                    if not rating_data.empty:\n                        fig_scatter = px.scatter(\n                            rating_data,\n                            x='price_per_hour',\n                            y='rating',\n                            title=\"價格 vs 評分散點圖\",\n                            labels={'price_per_hour': '每小時價格 (NT$)', 'rating': '評分'},\n                            color='sport_type' if 'sport_type' in rating_data.columns else None,\n                            size='rating',\n                            hover_data=['name'] if 'name' in rating_data.columns else None\n                        )\n                        \n                        # 添加趨勢線\n                        fig_scatter.add_trace(\n                            go.Scatter(\n                                x=rating_data['price_per_hour'],\n                                y=rating_data['rating'],\n                                mode='lines',\n                                name='趨勢線',\n                                line=dict(dash='dash', color='red')\n                            )\n                        )\n                        \n                        st.plotly_chart(fig_scatter, use_container_width=True)\n            \n            else:\n                st.warning(\"沒有有效的價格資料可供分析\")\n        \n        else:\n            st.info(\"價格資料不可用或未選擇此分析維度\")\n    \n    with tab4:\n        if \"評分分析\" in analysis_dimensions and 'rating' in all_venues.columns:\n            st.subheader(\"⭐ 評分與品質分析\")\n            \n            # 過濾有效評分資料\n            rating_data = all_venues[all_venues['rating'].notna() & (all_venues['rating'] > 0)]\n            \n            if not rating_data.empty:\n                col1, col2 = st.columns(2)\n                \n                with col1:\n                    # 評分分布\n                    fig_rating_dist = px.histogram(\n                        rating_data,\n                        x='rating',\n                        nbins=20,\n                        title=\"場地評分分布\",\n                        labels={'rating': '評分', 'count': '場地數量'},\n                        color_discrete_sequence=['#ff7f0e']\n                    )\n                    st.plotly_chart(fig_rating_dist, use_container_width=True)\n                \n                with col2:\n                    # 評分統計\n                    rating_stats = rating_data['rating'].describe()\n                    \n                    st.markdown(\"**⭐ 評分統計:**\")\n                    st.markdown(f\"• **平均評分**: {rating_stats['mean']:.2f}/5.0\")\n                    st.markdown(f\"• **中位數評分**: {rating_stats['50%']:.2f}/5.0\")\n                    st.markdown(f\"• **最低評分**: {rating_stats['min']:.2f}/5.0\")\n                    st.markdown(f\"• **最高評分**: {rating_stats['max']:.2f}/5.0\")\n                    \n                    # 評分等級分布\n                    excellent = len(rating_data[rating_data['rating'] >= 4.5])\n                    good = len(rating_data[(rating_data['rating'] >= 4.0) & (rating_data['rating'] < 4.5)])\n                    average = len(rating_data[(rating_data['rating'] >= 3.0) & (rating_data['rating'] < 4.0)])\n                    poor = len(rating_data[rating_data['rating'] < 3.0])\n                    \n                    st.markdown(f\"• **優秀** (≥4.5): {excellent} 個場地\")\n                    st.markdown(f\"• **良好** (4.0-4.5): {good} 個場地\")\n                    st.markdown(f\"• **普通** (3.0-4.0): {average} 個場地\")\n                    st.markdown(f\"• **需改善** (<3.0): {poor} 個場地\")\n                \n                # 各運動類型平均評分\n                if 'sport_type' in rating_data.columns:\n                    st.subheader(\"🏃‍♂️ 各運動類型平均評分\")\n                    \n                    sport_rating_avg = rating_data.groupby('sport_type')['rating'].agg(['mean', 'count']).reset_index()\n                    sport_rating_avg = sport_rating_avg[sport_rating_avg['count'] >= 3]  # 至少3個場地\n                    sport_rating_avg = sport_rating_avg.sort_values('mean', ascending=False)\n                    \n                    fig_sport_rating = px.bar(\n                        sport_rating_avg,\n                        x='sport_type',\n                        y='mean',\n                        title=\"各運動類型平均評分排行\",\n                        labels={'mean': '平均評分', 'sport_type': '運動類型'},\n                        color='mean',\n                        color_continuous_scale='RdYlGn'\n                    )\n                    fig_sport_rating.update_layout(xaxis_tickangle=-45)\n                    st.plotly_chart(fig_sport_rating, use_container_width=True)\n                \n                # 各地區平均評分\n                if 'district' in rating_data.columns:\n                    st.subheader(\"📍 各地區平均評分\")\n                    \n                    district_rating_avg = rating_data.groupby('district')['rating'].agg(['mean', 'count']).reset_index()\n                    district_rating_avg = district_rating_avg[district_rating_avg['count'] >= 3]\n                    district_rating_avg = district_rating_avg.sort_values('mean', ascending=False)\n                    \n                    fig_district_rating = px.bar(\n                        district_rating_avg,\n                        x='district',\n                        y='mean',\n                        title=\"各地區平均評分排行\",\n                        labels={'mean': '平均評分', 'district': '地區'},\n                        color='mean',\n                        color_continuous_scale='RdYlGn'\n                    )\n                    fig_district_rating.update_layout(xaxis_tickangle=-45)\n                    st.plotly_chart(fig_district_rating, use_container_width=True)\n            \n            else:\n                st.warning(\"沒有有效的評分資料可供分析\")\n        \n        else:\n            st.info(\"評分資料不可用或未選擇此分析維度\")\n    \n    # 高級分析\n    st.markdown(\"---\")\n    st.subheader(\"🔬 進階分析\")\n    \n    advanced_col1, advanced_col2 = st.columns(2)\n    \n    with advanced_col1:\n        # 相關性分析\n        if 'price_per_hour' in all_venues.columns and 'rating' in all_venues.columns:\n            st.markdown(\"**📊 變數相關性分析**\")\n            \n            numeric_columns = ['price_per_hour', 'rating']\n            available_numeric = [col for col in numeric_columns if col in all_venues.columns]\n            \n            if len(available_numeric) >= 2:\n                correlation_data = all_venues[available_numeric].corr()\n                \n                fig_corr = px.imshow(\n                    correlation_data.values,\n                    x=correlation_data.columns,\n                    y=correlation_data.index,\n                    title=\"變數相關性熱力圖\",\n                    color_continuous_scale='RdBu_r',\n                    zmin=-1, zmax=1\n                )\n                \n                # 添加數值標籤\n                for i in range(len(correlation_data.columns)):\n                    for j in range(len(correlation_data.index)):\n                        fig_corr.add_annotation(\n                            x=correlation_data.columns[i],\n                            y=correlation_data.index[j],\n                            text=f\"{correlation_data.iloc[j, i]:.2f}\",\n                            showarrow=False,\n                            font_color=\"white\" if abs(correlation_data.iloc[j, i]) > 0.5 else \"black\"\n                        )\n                \n                st.plotly_chart(fig_corr, use_container_width=True)\n    \n    with advanced_col2:\n        # 資料品質報告\n        st.markdown(\"**📋 資料品質報告**\")\n        \n        total_records = len(all_venues)\n        quality_report = {}\n        \n        for column in all_venues.columns:\n            non_null_count = all_venues[column].notna().sum()\n            completeness = (non_null_count / total_records) * 100\n            quality_report[column] = completeness\n        \n        # 顯示資料完整性\n        quality_df = pd.DataFrame(list(quality_report.items()), columns=['欄位', '完整性(%)'])\n        quality_df = quality_df.sort_values('完整性(%)', ascending=False)\n        \n        st.dataframe(quality_df, use_container_width=True)\n        \n        # 資料品質摘要\n        avg_completeness = quality_df['完整性(%)'].mean()\n        \n        if avg_completeness >= 90:\n            quality_status = \"🟢 優秀\"\n        elif avg_completeness >= 70:\n            quality_status = \"🟡 良好\"\n        else:\n            quality_status = \"🔴 需要改善\"\n        \n        st.metric(\"整體資料品質\", f\"{avg_completeness:.1f}%\", delta=quality_status)\n\nelse:\n    st.error(\"無法載入場地資料進行分析。請檢查資料來源或稍後再試。\")\n    \n    st.markdown(\"\"\"\n    ### 📊 分析功能說明\n    \n    當資料可用時，此頁面將提供：\n    \n    - **🏃‍♂️ 運動類型分析**: 各類運動場地的分布和價格比較\n    - **📍 地區分析**: 台北各地區場地密度和類型分布\n    - **💰 價格分析**: 價格分布、區間分析和價格與品質關係\n    - **⭐ 評分分析**: 場地品質評估和各維度表現\n    - **🔬 進階分析**: 變數相關性和資料品質報告\n    \"\"\")\n","size_bytes":20096},"pages/5_🏢_場地詳情.py":{"content":"import streamlit as st\nimport pandas as pd\nfrom utils.data_manager import DataManager\nfrom datetime import datetime, timedelta, date, time\n\nst.set_page_config(\n    page_title=\"場地詳情 - 台北運動場地搜尋引擎\",\n    page_icon=\"🏢\",\n    layout=\"wide\"\n)\n\n# 確保 session state 已初始化\nif 'data_manager' not in st.session_state:\n    st.session_state.data_manager = DataManager()\n\nst.title(\"🏢 場地詳細資訊\")\n\n# 從 URL 參數或選擇器獲取場地 ID\nvenue_id = st.query_params.get(\"id\", None)\n\nif venue_id is None:\n    # 如果沒有指定場地ID，顯示選擇器\n    all_venues = st.session_state.data_manager.get_all_venues()\n    \n    if all_venues is not None and not all_venues.empty:\n        st.subheader(\"請選擇要查看的場地\")\n        \n        venue_options = {}\n        for _, venue in all_venues.iterrows():\n            label = f\"{venue['name']} - {venue['district']}\"\n            venue_options[label] = venue['id']\n        \n        selected_venue = st.selectbox(\"選擇場地\", list(venue_options.keys()))\n        \n        if selected_venue:\n            venue_id = venue_options[selected_venue]\n    else:\n        st.error(\"沒有可用的場地資料\")\n        st.stop()\n\nif venue_id:\n    try:\n        venue_id = int(venue_id)\n        \n        # 獲取場地詳細資訊\n        venue_info = st.session_state.data_manager.get_venue_by_id(venue_id)\n        \n        if venue_info is None:\n            st.error(\"找不到指定的場地\")\n            st.stop()\n        \n        # 場地基本資訊\n        col1, col2 = st.columns([2, 1])\n        \n        with col1:\n            st.header(venue_info['name'])\n            st.markdown(f\"**地址:** {venue_info['address']}\")\n            st.markdown(f\"**地區:** {venue_info['district']}\")\n            st.markdown(f\"**運動類型:** {venue_info['sport_type']}\")\n            \n            if venue_info['description']:\n                st.markdown(\"**場地介紹:**\")\n                st.write(venue_info['description'])\n        \n        with col2:\n            # 價格和評分資訊\n            st.metric(\"時租價格\", f\"NT${venue_info['price_per_hour']:.0f}/小時\")\n            \n            # 使用計算後的平均評分\n            avg_rating = venue_info.get('avg_rating', venue_info.get('rating', 0))\n            if avg_rating and avg_rating > 0:\n                st.metric(\"平均評分\", f\"{float(avg_rating):.1f}/5.0\")\n            \n            review_count = venue_info.get('review_count', 0)\n            st.metric(\"評論數量\", f\"{review_count} 則\")\n        \n        # 設施資訊\n        if venue_info['facilities']:\n            st.subheader(\"🏃‍♂️ 設施資訊\")\n            # 處理 PostgreSQL 數組格式\n            facilities = venue_info['facilities']\n            if isinstance(facilities, str):\n                # 如果是字符串，嘗試解析為列表\n                facilities = facilities.strip('{}').split(',')\n                facilities = [f.strip().strip('\"') for f in facilities]\n            \n            facility_cols = st.columns(min(len(facilities), 4))\n            for i, facility in enumerate(facilities):\n                with facility_cols[i % 4]:\n                    st.info(f\"✓ {facility}\")\n        \n        # 聯絡資訊\n        st.subheader(\"📞 聯絡資訊\")\n        contact_col1, contact_col2 = st.columns(2)\n        \n        with contact_col1:\n            if venue_info['contact_phone']:\n                st.markdown(f\"**電話:** {venue_info['contact_phone']}\")\n            if venue_info['opening_hours']:\n                st.markdown(f\"**營業時間:** {venue_info['opening_hours']}\")\n        \n        with contact_col2:\n            if venue_info['website']:\n                st.markdown(f\"**網站:** [官方網站]({venue_info['website']})\")\n            if venue_info['latitude'] and venue_info['longitude']:\n                st.markdown(f\"**座標:** {venue_info['latitude']:.4f}, {venue_info['longitude']:.4f}\")\n        \n        # 分頁標籤\n        tab1, tab2, tab3 = st.tabs([\"💬 用戶評論\", \"📅 立即預訂\", \"📍 地圖位置\"])\n        \n        with tab1:\n            # 用戶評論區域\n            st.subheader(\"用戶評論\")\n            \n            # 獲取已審核的評論\n            reviews = st.session_state.data_manager.get_venue_reviews(venue_id)\n            \n            if reviews:\n                for review in reviews:\n                    with st.container():\n                        col1, col2 = st.columns([3, 1])\n                        with col1:\n                            st.write(f\"**{review['user_name']}**\")\n                            st.write(review['comment'])\n                        with col2:\n                            st.metric(\"評分\", f\"{review['rating']}/5\")\n                            st.caption(f\"{review['created_at']}\")\n                        st.divider()\n            else:\n                st.info(\"暫無評論，成為第一個評論的用戶吧！\")\n            \n            # 添加新評論\n            st.subheader(\"發表評論\")\n            with st.form(\"review_form\"):\n                user_name = st.text_input(\"您的姓名\", placeholder=\"請輸入您的姓名\")\n                rating = st.slider(\"評分\", 1, 5, 5)\n                comment = st.text_area(\"評論內容\", placeholder=\"分享您對這個場地的體驗...\")\n                \n                if st.form_submit_button(\"提交評論\"):\n                    if user_name and comment:\n                        success = st.session_state.data_manager.add_review(\n                            venue_id, user_name, rating, comment\n                        )\n                        if success:\n                            st.success(\"評論已提交！審核通過後將顯示在評論區域。\")\n                            st.rerun()\n                        else:\n                            st.error(\"提交評論失敗，請稍後再試。\")\n                    else:\n                        st.error(\"請填寫所有必填欄位。\")\n        \n        with tab2:\n            # 預訂功能\n            st.subheader(\"場地預訂\")\n            \n            with st.form(\"booking_form\"):\n                col1, col2 = st.columns(2)\n                \n                with col1:\n                    user_name = st.text_input(\"預訂人姓名\", placeholder=\"請輸入您的姓名\")\n                    user_email = st.text_input(\"電子郵件\", placeholder=\"用於確認預訂\")\n                    user_phone = st.text_input(\"聯絡電話\", placeholder=\"緊急聯絡用\")\n                \n                with col2:\n                    booking_date = st.date_input(\"預訂日期\", min_value=date.today())\n                    \n                    # 時間選擇\n                    time_col1, time_col2 = st.columns(2)\n                    with time_col1:\n                        start_time = st.time_input(\"開始時間\", value=time(9, 0))\n                    with time_col2:\n                        end_time = st.time_input(\"結束時間\", value=time(10, 0))\n                \n                special_requests = st.text_area(\"特殊需求\", placeholder=\"其他需要說明的事項...\")\n                \n                if st.form_submit_button(\"檢查可用性並預訂\"):\n                    if user_name and user_email and user_phone:\n                        # 檢查時間邏輯\n                        if start_time >= end_time:\n                            st.error(\"結束時間必須晚於開始時間！\")\n                        else:\n                            # 檢查可用性\n                            is_available = st.session_state.data_manager.check_availability(\n                                venue_id, str(booking_date), str(start_time), str(end_time)\n                            )\n                            \n                            if is_available:\n                                # 創建預訂\n                                booking_id = st.session_state.data_manager.create_booking(\n                                    venue_id, user_name, user_email, user_phone,\n                                    str(booking_date), str(start_time), str(end_time),\n                                    special_requests\n                                )\n                                \n                                if booking_id:\n                                    st.success(f\"預訂成功！預訂編號：{booking_id}\")\n                                    st.info(\"我們將透過電子郵件確認您的預訂詳情。\")\n                                else:\n                                    st.error(\"預訂失敗，請稍後再試。\")\n                            else:\n                                st.warning(\"該時段已被預訂，請選擇其他時間。\")\n                    else:\n                        st.error(\"請填寫所有必填欄位。\")\n        \n        with tab3:\n            # 地圖顯示\n            st.subheader(\"地圖位置\")\n            \n            if venue_info['latitude'] and venue_info['longitude']:\n                # 創建地圖數據\n                map_data = pd.DataFrame({\n                    'lat': [float(venue_info['latitude'])],\n                    'lon': [float(venue_info['longitude'])],\n                    'size': [20],\n                    'name': [venue_info['name']]\n                })\n                \n                st.map(map_data, zoom=14)\n                \n                # 提供 Google Maps 連結\n                google_maps_url = f\"https://www.google.com/maps/search/?api=1&query={venue_info['latitude']},{venue_info['longitude']}\"\n                st.markdown(f\"[在 Google Maps 中查看]({google_maps_url})\")\n            else:\n                st.warning(\"該場地暫無地理位置資訊\")\n        \n    except ValueError:\n        st.error(\"無效的場地ID\")\n    except Exception as e:\n        st.error(f\"載入場地資訊時發生錯誤: {str(e)}\")\nelse:\n    st.warning(\"請選擇要查看的場地\")","size_bytes":9982},"pages/6_👨‍💼_評論管理.py":{"content":"import streamlit as st\nimport pandas as pd\nfrom utils.data_manager import DataManager\n\nst.set_page_config(\n    page_title=\"評論管理 - 台北運動場地搜尋引擎\",\n    page_icon=\"👨‍💼\",\n    layout=\"wide\"\n)\n\n# 確保 session state 已初始化\nif 'data_manager' not in st.session_state:\n    st.session_state.data_manager = DataManager()\n\nst.title(\"👨‍💼 評論管理系統\")\nst.markdown(\"管理和審核用戶提交的場地評論\")\n\n# 管理員密碼保護\nif 'admin_authenticated' not in st.session_state:\n    st.session_state.admin_authenticated = False\n\nif not st.session_state.admin_authenticated:\n    st.subheader(\"🔐 管理員登入\")\n    \n    with st.form(\"admin_login\"):\n        admin_password = st.text_input(\"管理員密碼\", type=\"password\", placeholder=\"請輸入管理員密碼\")\n        \n        if st.form_submit_button(\"登入\"):\n            # 使用環境變數設定管理員密碼\n            import os\n            admin_secret = os.getenv(\"ADMIN_PASSWORD\", \"replit_admin_2024\")\n            \n            if admin_password == admin_secret:\n                st.session_state.admin_authenticated = True\n                st.success(\"登入成功！\")\n                st.rerun()\n            else:\n                st.error(\"密碼錯誤，請重新輸入。\")\n    \n    st.info(\"💡 請聯繫管理員取得登入密碼\")\n    st.stop()\n\n# 管理員介面\ntab1, tab2, tab3 = st.tabs([\"⏳ 待審核評論\", \"✅ 已審核評論\", \"📊 評論統計\"])\n\nwith tab1:\n    st.subheader(\"待審核評論\")\n    \n    try:\n        # 獲取所有待審核的評論\n        if hasattr(st.session_state.data_manager, 'engine') and st.session_state.data_manager.engine:\n            query = \"\"\"\n            SELECT r.id, r.venue_id, v.name as venue_name, r.user_name, \n                   r.rating, r.comment, r.created_at\n            FROM reviews r\n            JOIN venues v ON r.venue_id = v.id\n            WHERE r.status = 'pending'\n            ORDER BY r.created_at DESC\n            \"\"\"\n            \n            pending_reviews = pd.read_sql(query, st.session_state.data_manager.engine)\n            \n            if not pending_reviews.empty:\n                st.info(f\"共有 {len(pending_reviews)} 則待審核評論\")\n                \n                for idx, review in pending_reviews.iterrows():\n                    with st.container():\n                        col1, col2, col3 = st.columns([3, 1, 1])\n                        \n                        with col1:\n                            st.markdown(f\"**場地:** {review['venue_name']}\")\n                            st.markdown(f\"**用戶:** {review['user_name']}\")\n                            st.markdown(f\"**評分:** {'⭐' * review['rating']} ({review['rating']}/5)\")\n                            st.markdown(f\"**評論:** {review['comment']}\")\n                            st.caption(f\"提交時間: {review['created_at']}\")\n                        \n                        with col2:\n                            if st.button(f\"✅ 批准\", key=f\"approve_{review['id']}\"):\n                                # 批准評論\n                                try:\n                                    with st.session_state.data_manager.engine.connect() as conn:\n                                        from sqlalchemy import text\n                                        update_query = text(\"\"\"\n                                        UPDATE reviews \n                                        SET status = 'approved', updated_at = NOW()\n                                        WHERE id = :review_id\n                                        \"\"\")\n                                        conn.execute(update_query, {'review_id': review['id']})\n                                        conn.commit()\n                                    \n                                    st.success(f\"評論 #{review['id']} 已批准！\")\n                                    st.rerun()\n                                except Exception as e:\n                                    st.error(f\"批准評論失敗: {e}\")\n                        \n                        with col3:\n                            if st.button(f\"❌ 拒絕\", key=f\"reject_{review['id']}\"):\n                                # 拒絕評論\n                                try:\n                                    with st.session_state.data_manager.engine.connect() as conn:\n                                        from sqlalchemy import text\n                                        update_query = text(\"\"\"\n                                        UPDATE reviews \n                                        SET status = 'rejected', updated_at = NOW()\n                                        WHERE id = :review_id\n                                        \"\"\")\n                                        conn.execute(update_query, {'review_id': review['id']})\n                                        conn.commit()\n                                    \n                                    st.warning(f\"評論 #{review['id']} 已拒絕！\")\n                                    st.rerun()\n                                except Exception as e:\n                                    st.error(f\"拒絕評論失敗: {e}\")\n                        \n                        st.divider()\n            else:\n                st.success(\"目前沒有待審核的評論！\")\n        else:\n            st.error(\"無法連接到資料庫\")\n            \n    except Exception as e:\n        st.error(f\"載入待審核評論時發生錯誤: {e}\")\n\nwith tab2:\n    st.subheader(\"已審核評論\")\n    \n    try:\n        if hasattr(st.session_state.data_manager, 'engine') and st.session_state.data_manager.engine:\n            # 狀態篩選\n            status_filter = st.selectbox(\n                \"篩選狀態\",\n                [\"approved\", \"rejected\"],\n                format_func=lambda x: \"已批准\" if x == \"approved\" else \"已拒絕\"\n            )\n            \n            query = \"\"\"\n            SELECT r.id, r.venue_id, v.name as venue_name, r.user_name, \n                   r.rating, r.comment, r.status, r.created_at, r.updated_at\n            FROM reviews r\n            JOIN venues v ON r.venue_id = v.id\n            WHERE r.status = %s\n            ORDER BY r.updated_at DESC\n            LIMIT 50\n            \"\"\"\n            \n            reviewed_comments = pd.read_sql(query, st.session_state.data_manager.engine, params=[status_filter])\n            \n            if not reviewed_comments.empty:\n                st.info(f\"顯示最近 {len(reviewed_comments)} 則{('已批准' if status_filter == 'approved' else '已拒絕')}評論\")\n                \n                for idx, review in reviewed_comments.iterrows():\n                    with st.container():\n                        col1, col2 = st.columns([4, 1])\n                        \n                        with col1:\n                            st.markdown(f\"**場地:** {review['venue_name']}\")\n                            st.markdown(f\"**用戶:** {review['user_name']}\")\n                            st.markdown(f\"**評分:** {'⭐' * review['rating']} ({review['rating']}/5)\")\n                            st.markdown(f\"**評論:** {review['comment']}\")\n                            st.caption(f\"提交: {review['created_at']} | 審核: {review['updated_at']}\")\n                        \n                        with col2:\n                            status_color = \"🟢\" if review['status'] == 'approved' else \"🔴\"\n                            status_text = \"已批准\" if review['status'] == 'approved' else \"已拒絕\"\n                            st.markdown(f\"{status_color} **{status_text}**\")\n                            st.caption(f\"ID: {review['id']}\")\n                        \n                        st.divider()\n            else:\n                st.info(f\"沒有{('已批准' if status_filter == 'approved' else '已拒絕')}的評論\")\n        else:\n            st.error(\"無法連接到資料庫\")\n            \n    except Exception as e:\n        st.error(f\"載入已審核評論時發生錯誤: {e}\")\n\nwith tab3:\n    st.subheader(\"評論統計\")\n    \n    try:\n        if hasattr(st.session_state.data_manager, 'engine') and st.session_state.data_manager.engine:\n            # 基本統計\n            stats_query = \"\"\"\n            SELECT \n                COUNT(*) as total_reviews,\n                COUNT(CASE WHEN status = 'pending' THEN 1 END) as pending_count,\n                COUNT(CASE WHEN status = 'approved' THEN 1 END) as approved_count,\n                COUNT(CASE WHEN status = 'rejected' THEN 1 END) as rejected_count,\n                ROUND(AVG(rating), 2) as avg_rating\n            FROM reviews\n            \"\"\"\n            \n            stats = pd.read_sql(stats_query, st.session_state.data_manager.engine)\n            \n            if not stats.empty:\n                stat_row = stats.iloc[0]\n                \n                col1, col2, col3, col4, col5 = st.columns(5)\n                \n                with col1:\n                    st.metric(\"總評論數\", int(stat_row['total_reviews']))\n                \n                with col2:\n                    st.metric(\"待審核\", int(stat_row['pending_count']))\n                \n                with col3:\n                    st.metric(\"已批准\", int(stat_row['approved_count']))\n                \n                with col4:\n                    st.metric(\"已拒絕\", int(stat_row['rejected_count']))\n                \n                with col5:\n                    avg_rating = stat_row['avg_rating']\n                    st.metric(\"平均評分\", f\"{avg_rating}/5.0\" if avg_rating else \"N/A\")\n            \n            # 場地評論統計\n            st.subheader(\"各場地評論統計\")\n            \n            venue_stats_query = \"\"\"\n            SELECT v.name, v.district,\n                   COUNT(r.id) as review_count,\n                   COUNT(CASE WHEN r.status = 'approved' THEN 1 END) as approved_reviews,\n                   ROUND(AVG(CASE WHEN r.status = 'approved' THEN r.rating END), 2) as avg_approved_rating\n            FROM venues v\n            LEFT JOIN reviews r ON v.id = r.venue_id\n            GROUP BY v.id, v.name, v.district\n            ORDER BY review_count DESC\n            \"\"\"\n            \n            venue_stats = pd.read_sql(venue_stats_query, st.session_state.data_manager.engine)\n            \n            if not venue_stats.empty:\n                st.dataframe(\n                    venue_stats.rename(columns={\n                        'name': '場地名稱',\n                        'district': '地區',\n                        'review_count': '總評論數',\n                        'approved_reviews': '已批准評論',\n                        'avg_approved_rating': '平均評分'\n                    }),\n                    use_container_width=True\n                )\n            else:\n                st.info(\"暫無場地評論統計資料\")\n        else:\n            st.error(\"無法連接到資料庫\")\n            \n    except Exception as e:\n        st.error(f\"載入評論統計時發生錯誤: {e}\")\n\n# 快速操作\nst.markdown(\"---\")\nst.subheader(\"🚀 快速操作\")\n\ncol1, col2 = st.columns(2)\n\nwith col1:\n    if st.button(\"🔄 重新載入數據\", use_container_width=True):\n        st.rerun()\n\nwith col2:\n    if st.button(\"🚪 登出\", use_container_width=True):\n        st.session_state.admin_authenticated = False\n        st.rerun()","size_bytes":11407},"utils/data_manager.py":{"content":"import pandas as pd\nimport numpy as np\nimport os\nfrom typing import List, Optional, Dict, Any\nimport random\nimport streamlit as st\n\n@st.cache_data\ndef load_venues_data():\n    \"\"\"\n    使用缓存载入场地数据，避免重复读取\n    \"\"\"\n    try:\n        # 讀取CSV檔案\n        csv_path = \"attached_assets/finding move - main (1)_1757915289189.csv\"\n        \n        if not os.path.exists(csv_path):\n            print(f\"CSV檔案不存在: {csv_path}\")\n            return pd.DataFrame()\n        \n        # 讀取CSV，跳過前面的標題行\n        raw_data = pd.read_csv(csv_path, encoding='utf-8', skiprows=5)\n        \n        # 清理欄位名稱\n        raw_data.columns = [\n            'name', 'district', 'price_range', 'sport_type', 'opening_hours',\n            'facilities', 'venue_scale', 'courses', 'other', 'website',\n            'address', 'contact_phone', 'photos'\n        ]\n        \n        # 過濾掉空的場地名稱\n        raw_data = raw_data.dropna(subset=['name'])\n        raw_data = raw_data[raw_data['name'].str.strip() != '']\n        \n        # 建立標準化的資料結構\n        venues_list = []\n        \n        for idx, row in raw_data.iterrows():\n            venue = {\n                'id': idx + 1,\n                'name': str(row['name']).strip() if pd.notna(row['name']) else '',\n                'district': str(row['district']).strip() if pd.notna(row['district']) else '',\n                'address': str(row['address']).strip() if pd.notna(row['address']) else '',\n                'sport_type': DataManager._normalize_sport_type_static(row['sport_type']),\n                'price_per_hour': DataManager._extract_price_static(row['price_range']),\n                'rating': round(random.uniform(3.5, 5.0), 1),  # 模擬評分\n                'facilities': DataManager._normalize_facilities_static(row['facilities']),\n                'description': str(row['other']).strip() if pd.notna(row['other']) else '',\n                'contact_phone': str(row['contact_phone']).strip() if pd.notna(row['contact_phone']) else '',\n                'opening_hours': str(row['opening_hours']).strip() if pd.notna(row['opening_hours']) else '',\n                'website': str(row['website']).strip() if pd.notna(row['website']) else '',\n                'venue_scale': str(row['venue_scale']).strip() if pd.notna(row['venue_scale']) else '',\n                'courses': str(row['courses']).strip() if pd.notna(row['courses']) else '',\n                'photos': str(row['photos']).strip() if pd.notna(row['photos']) else '',\n                'latitude': DataManager._get_district_coordinates_static(row['district'])[0],\n                'longitude': DataManager._get_district_coordinates_static(row['district'])[1]\n            }\n            venues_list.append(venue)\n        \n        # 轉換為DataFrame\n        venues_data = pd.DataFrame(venues_list)\n        print(f\"✅ 成功載入 {len(venues_data)} 筆場地資料\")\n        return venues_data\n        \n    except Exception as e:\n        print(f\"❌ 載入場地資料時發生錯誤: {e}\")\n        return pd.DataFrame()\n\nclass DataManager:\n    \"\"\"\n    資料管理類別，負責處理場地資料的載入、篩選和搜尋功能\n    從CSV檔案讀取台北運動場地資料，使用缓存优化性能\n    \"\"\"\n    \n    def __init__(self):\n        # 使用缓存函数载入数据\n        self.venues_data = load_venues_data()\n        self.sport_types = []\n        self.districts = []\n        self.facilities = []\n        self._extract_metadata()\n    \n    @staticmethod\n    def _normalize_sport_type_static(sport_type):\n        \"\"\"标准化运动类型 - 静态方法\"\"\"\n        if pd.isna(sport_type) or sport_type == '':\n            return '綜合運動'\n        \n        sport_type = str(sport_type).strip()\n        sport_mapping = {\n            '羽球': '羽毛球', '羽毛球': '羽毛球', '游泳': '游泳',\n            '健身': '健身', '重訓': '健身', '有氧': '有氧運動',\n            '瑜珈': '瑜伽', '瑜伽': '瑜伽', '球類': '球類運動',\n            '籃球': '籃球', '足球': '足球', '網球': '網球',\n            '桌球': '桌球', '撞球': '撞球', '排球': '排球',\n            '戶外運動': '戶外運動'\n        }\n        \n        for key, value in sport_mapping.items():\n            if key in sport_type:\n                return value\n        return sport_type if sport_type else '綜合運動'\n    \n    @staticmethod\n    def _extract_price_static(price_range):\n        \"\"\"从价格区间提取平均价格 - 静态方法\"\"\"\n        if pd.isna(price_range) or price_range == '':\n            return random.randint(100, 500)\n        \n        price_str = str(price_range).strip()\n        if '0-200' in price_str:\n            return 150\n        elif '200-500' in price_str:\n            return 350\n        elif '500以上' in price_str:\n            return 700\n        else:\n            return random.randint(200, 400)\n    \n    @staticmethod\n    def _normalize_facilities_static(facilities):\n        \"\"\"标准化设施信息 - 静态方法\"\"\"\n        if pd.isna(facilities) or facilities == '':\n            return '基本設施'\n        \n        facilities_str = str(facilities).strip()\n        facility_mapping = {\n            '淋浴間': '淋浴間', '置物櫃': '置物櫃', '停車場': '停車場',\n            'Wi-Fi': 'Wi-Fi', 'WiFi': 'Wi-Fi', '無障礙設施': '無障礙設施',\n            '性別友善設施': '性別友善設施', '寵物友善': '寵物友善', '女性專用': '女性專用'\n        }\n        \n        normalized_facilities = []\n        for key, value in facility_mapping.items():\n            if key in facilities_str:\n                normalized_facilities.append(value)\n        \n        return '/'.join(normalized_facilities) if normalized_facilities else facilities_str\n    \n    @staticmethod\n    def _get_district_coordinates_static(district):\n        \"\"\"取得地区坐标 - 静态方法\"\"\"\n        district_coords = {\n            '士林區': (25.0881, 121.5256), '大安區': (25.0266, 121.5484),\n            '中山區': (25.0633, 121.5267), '大同區': (25.0633, 121.5154),\n            '中正區': (25.0364, 121.5161), '信義區': (25.0336, 121.5751),\n            '萬華區': (25.0327, 121.5060), '文山區': (24.9906, 121.5420),\n            '松山區': (25.0501, 121.5776), '內湖區': (25.0838, 121.5948),\n            '南港區': (25.0415, 121.6073), '北投區': (25.1372, 121.5018)\n        }\n        return district_coords.get(str(district).strip(), (25.0478, 121.5319))\n    \n    def _extract_metadata(self):\n        \"\"\"从载入的数据中提取元数据\"\"\"\n        if self.venues_data is not None and not self.venues_data.empty:\n            # 运动类型\n            if 'sport_type' in self.venues_data.columns:\n                self.sport_types = sorted(self.venues_data['sport_type'].dropna().unique().tolist())\n            \n            # 地区\n            if 'district' in self.venues_data.columns:\n                self.districts = sorted(self.venues_data['district'].dropna().unique().tolist())\n            \n            # 设施\n            if 'facilities' in self.venues_data.columns:\n                all_facilities = []\n                for facilities_str in self.venues_data['facilities'].dropna():\n                    if '/' in str(facilities_str):\n                        all_facilities.extend(str(facilities_str).split('/'))\n                    else:\n                        all_facilities.append(str(facilities_str))\n                self.facilities = sorted(list(set([f.strip() for f in all_facilities if f.strip()])))\n    \n    def _load_data(self):\n        \"\"\"\n        從CSV檔案載入場地資料\n        \"\"\"\n        try:\n            # 讀取CSV檔案\n            csv_path = \"attached_assets/finding move - main (1)_1757915289189.csv\"\n            \n            if not os.path.exists(csv_path):\n                print(f\"CSV檔案不存在: {csv_path}\")\n                self._create_empty_dataframe()\n                return\n            \n            # 讀取CSV，跳過前面的標題行\n            raw_data = pd.read_csv(csv_path, encoding='utf-8', skiprows=5)\n            \n            # 清理欄位名稱\n            raw_data.columns = [\n                'name', 'district', 'price_range', 'sport_type', 'opening_hours',\n                'facilities', 'venue_scale', 'courses', 'other', 'website',\n                'address', 'contact_phone', 'photos'\n            ]\n            \n            # 過濾掉空的場地名稱\n            raw_data = raw_data.dropna(subset=['name'])\n            raw_data = raw_data[raw_data['name'].str.strip() != '']\n            \n            # 建立標準化的資料結構\n            venues_list = []\n            \n            for idx, row in raw_data.iterrows():\n                venue = {\n                    'id': idx + 1,\n                    'name': str(row['name']).strip() if pd.notna(row['name']) else '',\n                    'district': str(row['district']).strip() if pd.notna(row['district']) else '',\n                    'address': str(row['address']).strip() if pd.notna(row['address']) else '',\n                    'sport_type': self._normalize_sport_type(row['sport_type']),\n                    'price_per_hour': self._extract_price(row['price_range']),\n                    'rating': round(random.uniform(3.5, 5.0), 1),  # 模擬評分\n                    'facilities': self._normalize_facilities(row['facilities']),\n                    'description': str(row['other']).strip() if pd.notna(row['other']) else '',\n                    'contact_phone': str(row['contact_phone']).strip() if pd.notna(row['contact_phone']) else '',\n                    'opening_hours': str(row['opening_hours']).strip() if pd.notna(row['opening_hours']) else '',\n                    'website': str(row['website']).strip() if pd.notna(row['website']) else '',\n                    'venue_scale': str(row['venue_scale']).strip() if pd.notna(row['venue_scale']) else '',\n                    'courses': str(row['courses']).strip() if pd.notna(row['courses']) else '',\n                    'photos': str(row['photos']).strip() if pd.notna(row['photos']) else '',\n                    'latitude': self._get_district_coordinates(row['district'])[0],\n                    'longitude': self._get_district_coordinates(row['district'])[1]\n                }\n                venues_list.append(venue)\n            \n            # 轉換為DataFrame\n            self.venues_data = pd.DataFrame(venues_list)\n            \n            # 更新可用選項\n            self._update_available_options()\n            \n            print(f\"成功載入 {len(self.venues_data)} 筆場地資料\")\n            \n        except Exception as e:\n            print(f\"載入CSV資料時發生錯誤: {e}\")\n            self._create_empty_dataframe()\n    \n    def _create_empty_dataframe(self):\n        \"\"\"建立空的DataFrame作為後備\"\"\"\n        column_names = [\n            'id', 'name', 'address', 'district', 'sport_type',\n            'price_per_hour', 'rating', 'facilities', 'description',\n            'contact_phone', 'opening_hours', 'website',\n            'latitude', 'longitude', 'venue_scale', 'courses', 'photos'\n        ]\n        self.venues_data = pd.DataFrame(columns=column_names)\n        self._update_available_options()\n    \n    def _normalize_sport_type(self, sport_type):\n        \"\"\"標準化運動類型\"\"\"\n        if pd.isna(sport_type) or sport_type == '':\n            return '綜合運動'\n        \n        sport_type = str(sport_type).strip()\n        \n        # 運動類型對應表\n        sport_mapping = {\n            '羽球': '羽毛球',\n            '羽毛球': '羽毛球',\n            '游泳': '游泳',\n            '健身': '健身',\n            '重訓': '健身',\n            '有氧': '有氧運動',\n            '瑜珈': '瑜伽',\n            '瑜伽': '瑜伽',\n            '球類': '球類運動',\n            '籃球': '籃球',\n            '足球': '足球',\n            '網球': '網球',\n            '桌球': '桌球',\n            '撞球': '撞球',\n            '排球': '排球',\n            '戶外運動': '戶外運動'\n        }\n        \n        # 檢查包含的運動類型\n        for key, value in sport_mapping.items():\n            if key in sport_type:\n                return value\n        \n        # 如果包含多種運動，返回第一個識別到的\n        if '/' in sport_type:\n            types = sport_type.split('/')\n            for t in types:\n                t = t.strip()\n                for key, value in sport_mapping.items():\n                    if key in t:\n                        return value\n        \n        return sport_type if sport_type else '綜合運動'\n    \n    def _extract_price(self, price_range):\n        \"\"\"從價格區間提取平均價格\"\"\"\n        if pd.isna(price_range) or price_range == '':\n            return random.randint(100, 500)  # 預設價格範圍\n        \n        price_str = str(price_range).strip()\n        \n        if '0-200' in price_str:\n            return 150\n        elif '200-500' in price_str:\n            return 350\n        elif '500以上' in price_str:\n            return 700\n        else:\n            return random.randint(200, 400)\n    \n    def _normalize_facilities(self, facilities):\n        \"\"\"標準化設施資訊\"\"\"\n        if pd.isna(facilities) or facilities == '':\n            return '基本設施'\n        \n        facilities_str = str(facilities).strip()\n        \n        # 標準化設施名稱\n        facility_mapping = {\n            '淋浴間': '淋浴間',\n            '置物櫃': '置物櫃',\n            '停車場': '停車場',\n            'Wi-Fi': 'Wi-Fi',\n            'WiFi': 'Wi-Fi',\n            '無障礙設施': '無障礙設施',\n            '性別友善設施': '性別友善設施',\n            '寵物友善': '寵物友善',\n            '女性專用': '女性專用'\n        }\n        \n        normalized_facilities = []\n        for key, value in facility_mapping.items():\n            if key in facilities_str:\n                normalized_facilities.append(value)\n        \n        return '/'.join(normalized_facilities) if normalized_facilities else facilities_str\n    \n    def _get_district_coordinates(self, district):\n        \"\"\"取得地區的座標 (緯度, 經度)\"\"\"\n        district_coords = {\n            '士林區': (25.0881, 121.5256),\n            '大安區': (25.0266, 121.5484),\n            '中山區': (25.0633, 121.5267),\n            '大同區': (25.0633, 121.5154),\n            '中正區': (25.0364, 121.5161),\n            '信義區': (25.0336, 121.5751),\n            '萬華區': (25.0327, 121.5060),\n            '文山區': (24.9906, 121.5420),\n            '松山區': (25.0501, 121.5776),\n            '內湖區': (25.0838, 121.5948),\n            '南港區': (25.0415, 121.6073),\n            '北投區': (25.1372, 121.5018)\n        }\n        \n        return district_coords.get(str(district).strip(), (25.0478, 121.5319))  # 預設台北市中心\n    \n    def _update_available_options(self):\n        \"\"\"更新可用的運動類型、地區和設施列表\"\"\"\n        if self.venues_data is not None and not self.venues_data.empty:\n            # 運動類型\n            if 'sport_type' in self.venues_data.columns:\n                self.sport_types = sorted(self.venues_data['sport_type'].dropna().unique().tolist())\n            \n            # 地區\n            if 'district' in self.venues_data.columns:\n                self.districts = sorted(self.venues_data['district'].dropna().unique().tolist())\n            \n            # 設施\n            if 'facilities' in self.venues_data.columns:\n                all_facilities = []\n                for facilities in self.venues_data['facilities'].dropna():\n                    if isinstance(facilities, str) and facilities.strip():\n                        all_facilities.extend([f.strip() for f in facilities.split('/')])\n                \n                self.facilities = sorted(list(set(all_facilities)))\n        else:\n            # 如果沒有資料，提供一些預設選項\n            self.sport_types = [\n                \"籃球\", \"足球\", \"網球\", \"羽毛球\", \"游泳\", \"健身\", \n                \"跑步\", \"桌球\", \"排球\", \"棒球\", \"瑜伽\", \"舞蹈\"\n            ]\n            self.districts = [\n                \"中正區\", \"大同區\", \"中山區\", \"松山區\", \"大安區\", \"萬華區\",\n                \"信義區\", \"士林區\", \"北投區\", \"內湖區\", \"南港區\", \"文山區\"\n            ]\n            self.facilities = [\n                \"停車場\", \"淋浴間\", \"更衣室\", \"冷氣\", \"音響設備\", \"器材租借\",\n                \"飲水機\", \"休息區\", \"無障礙設施\", \"Wi-Fi\", \"置物櫃\", \"觀眾席\"\n            ]\n    \n    def get_all_venues(self) -> Optional[pd.DataFrame]:\n        \"\"\"獲取所有場地資料\"\"\"\n        return self.venues_data.copy() if self.venues_data is not None else None\n    \n    def get_sport_types(self) -> List[str]:\n        \"\"\"獲取所有可用的運動類型\"\"\"\n        return self.sport_types.copy()\n    \n    def get_districts(self) -> List[str]:\n        \"\"\"獲取所有可用的地區\"\"\"\n        return self.districts.copy()\n    \n    def get_facilities(self) -> List[str]:\n        \"\"\"獲取所有可用的設施\"\"\"\n        return self.facilities.copy()\n    \n    def get_venue_stats(self) -> Dict[str, Any]:\n        \"\"\"獲取場地統計資訊\"\"\"\n        if self.venues_data is None or self.venues_data.empty:\n            return {\n                'total_venues': 0,\n                'sport_types': 0,\n                'districts': 0,\n                'avg_price': 0\n            }\n        \n        stats = {\n            'total_venues': len(self.venues_data),\n            'sport_types': len(self.sport_types),\n            'districts': len(self.districts),\n            'avg_price': self.venues_data['price_per_hour'].mean() if 'price_per_hour' in self.venues_data.columns else 0\n        }\n        \n        return stats\n    \n    def search_venues(self, query: str) -> Optional[pd.DataFrame]:\n        \"\"\"\n        根據關鍵字搜尋場地\n        \n        Args:\n            query: 搜尋關鍵字\n            \n        Returns:\n            符合搜尋條件的場地資料\n        \"\"\"\n        if self.venues_data is None or self.venues_data.empty or not query:\n            return None\n        \n        query = query.lower().strip()\n        \n        # 在多個欄位中搜尋\n        search_columns = ['name', 'address', 'district', 'sport_type', 'facilities', 'description']\n        \n        mask = pd.Series([False] * len(self.venues_data))\n        \n        for col in search_columns:\n            if col in self.venues_data.columns:\n                mask |= self.venues_data[col].astype(str).str.lower().str.contains(query, na=False)\n        \n        results = self.venues_data[mask].copy()\n        \n        return results if not results.empty else None\n    \n    def get_filtered_venues(self, \n                          sport_types: Optional[List[str]] = None,\n                          districts: Optional[List[str]] = None,\n                          price_range: Optional[List[float]] = None,\n                          facilities: Optional[List[str]] = None,\n                          min_rating: float = 0.0,\n                          search_query: Optional[str] = None) -> Optional[pd.DataFrame]:\n        \"\"\"\n        根據多個條件篩選場地\n        \n        Args:\n            sport_types: 運動類型列表\n            districts: 地區列表\n            price_range: 價格範圍 [最低價, 最高價]\n            facilities: 設施需求列表\n            min_rating: 最低評分要求\n            search_query: 搜尋關鍵字\n            \n        Returns:\n            符合篩選條件的場地資料\n        \"\"\"\n        if self.venues_data is None or self.venues_data.empty:\n            return None\n        \n        filtered_data = self.venues_data.copy()\n        \n        # 關鍵字搜尋\n        if search_query:\n            search_results = self.search_venues(search_query)\n            if search_results is not None:\n                filtered_data = search_results\n            else:\n                return None\n        \n        # 運動類型篩選\n        if sport_types and 'sport_type' in filtered_data.columns:\n            filtered_data = filtered_data[filtered_data['sport_type'].isin(sport_types)]\n        \n        # 地區篩選\n        if districts and 'district' in filtered_data.columns:\n            filtered_data = filtered_data[filtered_data['district'].isin(districts)]\n        \n        # 價格範圍篩選\n        if price_range and 'price_per_hour' in filtered_data.columns:\n            min_price, max_price = price_range\n            filtered_data = filtered_data[\n                (filtered_data['price_per_hour'] >= min_price) &\n                (filtered_data['price_per_hour'] <= max_price)\n            ]\n        \n        # 設施篩選\n        if facilities and 'facilities' in filtered_data.columns:\n            for facility in facilities:\n                filtered_data = filtered_data[\n                    filtered_data['facilities'].astype(str).str.contains(facility, na=False, case=False)\n                ]\n        \n        # 評分篩選\n        if min_rating > 0 and 'rating' in filtered_data.columns:\n            filtered_data = filtered_data[filtered_data['rating'] >= min_rating]\n        \n        return filtered_data if not filtered_data.empty else None\n    \n    def get_venues_by_ids(self, venue_ids: List[Any]) -> Optional[pd.DataFrame]:\n        \"\"\"\n        根據場地ID列表獲取場地資料\n        \n        Args:\n            venue_ids: 場地ID列表\n            \n        Returns:\n            對應的場地資料\n        \"\"\"\n        if self.venues_data is None or self.venues_data.empty or not venue_ids:\n            return None\n        \n        # 使用ID欄位篩選\n        if 'id' in self.venues_data.columns:\n            filtered_data = self.venues_data[self.venues_data['id'].isin(venue_ids)]\n        else:\n            return None\n        \n        return filtered_data if not filtered_data.empty else None\n    \n    def get_venue_by_id(self, venue_id: int) -> Optional[Dict[str, Any]]:\n        \"\"\"根據ID獲取場地詳細資訊\"\"\"\n        try:\n            if self.venues_data is None or self.venues_data.empty:\n                return None\n            \n            venue_data = self.venues_data[self.venues_data['id'] == venue_id]\n            \n            if venue_data.empty:\n                return None\n                \n            return venue_data.iloc[0].to_dict()\n            \n        except Exception as e:\n            print(f\"獲取場地詳細資訊時發生錯誤: {e}\")\n            return None\n    \n    def get_popular_searches(self) -> List[str]:\n        \"\"\"\n        獲取熱門搜尋關鍵字\n        \n        Returns:\n            熱門搜尋關鍵字列表\n        \"\"\"\n        popular_searches = []\n        \n        # 添加運動類型作為熱門搜尋\n        if self.sport_types:\n            popular_searches.extend(self.sport_types[:5])\n        \n        # 添加地區作為熱門搜尋\n        if self.districts:\n            popular_searches.extend(self.districts[:3])\n        \n        # 添加一些常見搜尋詞\n        common_searches = [\"室內\", \"戶外\", \"便宜\", \"高評分\", \"停車場\", \"24小時\"]\n        popular_searches.extend(common_searches)\n        \n        return popular_searches[:10]  # 返回前10個熱門搜尋","size_bytes":23520},"utils/map_utils.py":{"content":"import pandas as pd\nimport numpy as np\nfrom typing import Dict, List, Tuple, Optional, Any\nimport math\n\nclass MapUtils:\n    \"\"\"\n    地圖工具類別，提供地圖相關的功能和座標計算\n    \"\"\"\n    \n    def __init__(self):\n        # 台北市各區中心座標\n        self.district_centers = {\n            \"台北市中心\": [25.0330, 121.5654],\n            \"中正區\": [25.0320, 121.5200],\n            \"大同區\": [25.0632, 121.5138],\n            \"中山區\": [25.0642, 121.5326],\n            \"松山區\": [25.0497, 121.5746],\n            \"大安區\": [25.0263, 121.5436],\n            \"萬華區\": [25.0338, 121.5014],\n            \"信義區\": [25.0308, 121.5645],\n            \"士林區\": [25.0876, 121.5258],\n            \"北投區\": [25.1174, 121.4985],\n            \"內湖區\": [25.0695, 121.5945],\n            \"南港區\": [25.0547, 121.6066],\n            \"文山區\": [24.9887, 121.5706]\n        }\n        \n        # 運動類型對應的地圖標記顏色\n        self.sport_colors = {\n            \"籃球\": \"blue\",\n            \"足球\": \"green\", \n            \"網球\": \"red\",\n            \"羽毛球\": \"orange\",\n            \"游泳\": \"lightblue\",\n            \"健身房\": \"purple\",\n            \"跑步\": \"gray\",\n            \"桌球\": \"pink\",\n            \"排球\": \"darkblue\",\n            \"棒球\": \"darkgreen\",\n            \"瑜伽\": \"lightgreen\",\n            \"舞蹈\": \"violet\",\n            \"其他\": \"black\"\n        }\n        \n        # 台北市邊界座標（大約範圍）\n        self.taipei_bounds = {\n            \"north\": 25.3,\n            \"south\": 24.9,\n            \"east\": 121.65,\n            \"west\": 121.45\n        }\n    \n    def get_district_center(self, district_name: str) -> List[float]:\n        \"\"\"\n        獲取指定地區的中心座標\n        \n        Args:\n            district_name: 地區名稱\n            \n        Returns:\n            [緯度, 經度] 座標列表\n        \"\"\"\n        return self.district_centers.get(district_name, self.district_centers[\"台北市中心\"])\n    \n    def get_sport_colors(self) -> Dict[str, str]:\n        \"\"\"\n        獲取運動類型對應的顏色映射\n        \n        Returns:\n            運動類型到顏色的映射字典\n        \"\"\"\n        return self.sport_colors.copy()\n    \n    def calculate_distance(self, lat1: float, lon1: float, lat2: float, lon2: float) -> float:\n        \"\"\"\n        計算兩點間的距離（使用 Haversine 公式）\n        \n        Args:\n            lat1: 第一點緯度\n            lon1: 第一點經度\n            lat2: 第二點緯度\n            lon2: 第二點經度\n            \n        Returns:\n            距離（公里）\n        \"\"\"\n        # 將度轉換為弧度\n        lat1, lon1, lat2, lon2 = map(math.radians, [lat1, lon1, lat2, lon2])\n        \n        # Haversine 公式\n        dlat = lat2 - lat1\n        dlon = lon2 - lon1\n        a = math.sin(dlat/2)**2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon/2)**2\n        c = 2 * math.asin(math.sqrt(a))\n        \n        # 地球半徑（公里）\n        r = 6371\n        \n        return r * c\n    \n    def find_nearest_venue(self, venues_df: pd.DataFrame, target_lat: float, target_lon: float) -> Optional[Dict[str, Any]]:\n        \"\"\"\n        尋找距離指定座標最近的場地\n        \n        Args:\n            venues_df: 場地資料 DataFrame\n            target_lat: 目標緯度\n            target_lon: 目標經度\n            \n        Returns:\n            最近場地的資料字典\n        \"\"\"\n        if venues_df is None or venues_df.empty:\n            return None\n        \n        if 'latitude' not in venues_df.columns or 'longitude' not in venues_df.columns:\n            return None\n        \n        min_distance = float('inf')\n        nearest_venue = None\n        \n        for idx, venue in venues_df.iterrows():\n            if pd.notna(venue['latitude']) and pd.notna(venue['longitude']):\n                distance = self.calculate_distance(\n                    target_lat, target_lon,\n                    venue['latitude'], venue['longitude']\n                )\n                \n                if distance < min_distance:\n                    min_distance = distance\n                    nearest_venue = venue.to_dict()\n                    nearest_venue['distance'] = distance\n        \n        return nearest_venue\n    \n    def get_venues_in_radius(self, venues_df: pd.DataFrame, center_lat: float, center_lon: float, radius_km: float) -> pd.DataFrame:\n        \"\"\"\n        獲取指定半徑內的場地\n        \n        Args:\n            venues_df: 場地資料 DataFrame\n            center_lat: 中心點緯度\n            center_lon: 中心點經度\n            radius_km: 半徑（公里）\n            \n        Returns:\n            半徑內的場地資料\n        \"\"\"\n        if venues_df is None or venues_df.empty:\n            return pd.DataFrame()\n        \n        if 'latitude' not in venues_df.columns or 'longitude' not in venues_df.columns:\n            return venues_df\n        \n        venues_in_radius = []\n        \n        for idx, venue in venues_df.iterrows():\n            if pd.notna(venue['latitude']) and pd.notna(venue['longitude']):\n                distance = self.calculate_distance(\n                    center_lat, center_lon,\n                    venue['latitude'], venue['longitude']\n                )\n                \n                if distance <= radius_km:\n                    venue_data = venue.to_dict()\n                    venue_data['distance'] = distance\n                    venues_in_radius.append(venue_data)\n        \n        return pd.DataFrame(venues_in_radius)\n    \n    def generate_coordinates_for_district(self, district: str, num_points: int = 1) -> List[Tuple[float, float]]:\n        \"\"\"\n        為指定地區生成隨機座標點\n        \n        Args:\n            district: 地區名稱\n            num_points: 要生成的點數\n            \n        Returns:\n            座標點列表 [(緯度, 經度), ...]\n        \"\"\"\n        center = self.get_district_center(district)\n        center_lat, center_lon = center[0], center[1]\n        \n        # 生成區域內隨機點（約0.01度範圍內）\n        coordinates = []\n        np.random.seed(hash(district) % 1000)  # 確保每個區域的座標一致\n        \n        for _ in range(num_points):\n            # 在中心點周圍生成隨機偏移\n            lat_offset = np.random.uniform(-0.01, 0.01)\n            lon_offset = np.random.uniform(-0.01, 0.01)\n            \n            lat = center_lat + lat_offset\n            lon = center_lon + lon_offset\n            \n            # 確保座標在台北市範圍內\n            lat = max(self.taipei_bounds[\"south\"], min(self.taipei_bounds[\"north\"], lat))\n            lon = max(self.taipei_bounds[\"west\"], min(self.taipei_bounds[\"east\"], lon))\n            \n            coordinates.append((lat, lon))\n        \n        return coordinates\n    \n    def assign_coordinates_to_venues(self, venues_df: pd.DataFrame) -> pd.DataFrame:\n        \"\"\"\n        為沒有座標的場地分配座標\n        \n        Args:\n            venues_df: 場地資料 DataFrame\n            \n        Returns:\n            包含座標的場地資料\n        \"\"\"\n        if venues_df is None or venues_df.empty:\n            return venues_df\n        \n        venues_with_coords = venues_df.copy()\n        \n        # 確保座標欄位存在\n        if 'latitude' not in venues_with_coords.columns:\n            venues_with_coords['latitude'] = None\n        if 'longitude' not in venues_with_coords.columns:\n            venues_with_coords['longitude'] = None\n        \n        # 為沒有座標的場地分配座標\n        for idx, venue in venues_with_coords.iterrows():\n            if pd.isna(venue['latitude']) or pd.isna(venue['longitude']):\n                district = venue.get('district', '台北市中心')\n                \n                # 為該地區生成一個座標點\n                coords = self.generate_coordinates_for_district(district, 1)\n                if coords:\n                    lat, lon = coords[0]\n                    venues_with_coords.at[idx, 'latitude'] = lat\n                    venues_with_coords.at[idx, 'longitude'] = lon\n        \n        return venues_with_coords\n    \n    def get_district_bounds(self, district: str) -> Dict[str, float]:\n        \"\"\"\n        獲取指定地區的邊界座標\n        \n        Args:\n            district: 地區名稱\n            \n        Returns:\n            邊界座標字典 {'north': ..., 'south': ..., 'east': ..., 'west': ...}\n        \"\"\"\n        center = self.get_district_center(district)\n        center_lat, center_lon = center[0], center[1]\n        \n        # 每個區域約0.02度的範圍\n        bounds = {\n            'north': center_lat + 0.01,\n            'south': center_lat - 0.01,\n            'east': center_lon + 0.01,\n            'west': center_lon - 0.01\n        }\n        \n        return bounds\n    \n    def cluster_venues_by_proximity(self, venues_df: pd.DataFrame, max_distance_km: float = 0.5) -> Dict[str, List[int]]:\n        \"\"\"\n        根據距離將場地分群\n        \n        Args:\n            venues_df: 場地資料 DataFrame\n            max_distance_km: 最大群集距離（公里）\n            \n        Returns:\n            群集字典，key為群集ID，value為場地索引列表\n        \"\"\"\n        if venues_df is None or venues_df.empty:\n            return {}\n        \n        if 'latitude' not in venues_df.columns or 'longitude' not in venues_df.columns:\n            return {}\n        \n        clusters = {}\n        cluster_id = 0\n        assigned_venues = set()\n        \n        for idx, venue in venues_df.iterrows():\n            if idx in assigned_venues:\n                continue\n            \n            if pd.isna(venue['latitude']) or pd.isna(venue['longitude']):\n                continue\n            \n            # 開始新的群集\n            cluster_venues = [idx]\n            assigned_venues.add(idx)\n            \n            # 尋找附近的場地\n            for other_idx, other_venue in venues_df.iterrows():\n                if other_idx in assigned_venues:\n                    continue\n                \n                if pd.isna(other_venue['latitude']) or pd.isna(other_venue['longitude']):\n                    continue\n                \n                distance = self.calculate_distance(\n                    venue['latitude'], venue['longitude'],\n                    other_venue['latitude'], other_venue['longitude']\n                )\n                \n                if distance <= max_distance_km:\n                    cluster_venues.append(other_idx)\n                    assigned_venues.add(other_idx)\n            \n            clusters[f\"cluster_{cluster_id}\"] = cluster_venues\n            cluster_id += 1\n        \n        return clusters\n    \n    def get_route_waypoints(self, start_coords: Tuple[float, float], end_coords: Tuple[float, float], num_waypoints: int = 3) -> List[Tuple[float, float]]:\n        \"\"\"\n        獲取兩點間的路線途經點\n        \n        Args:\n            start_coords: 起點座標 (緯度, 經度)\n            end_coords: 終點座標 (緯度, 經度)\n            num_waypoints: 途經點數量\n            \n        Returns:\n            途經點座標列表\n        \"\"\"\n        start_lat, start_lon = start_coords\n        end_lat, end_lon = end_coords\n        \n        waypoints = []\n        \n        for i in range(1, num_waypoints + 1):\n            # 簡單的線性插值\n            ratio = i / (num_waypoints + 1)\n            \n            waypoint_lat = start_lat + (end_lat - start_lat) * ratio\n            waypoint_lon = start_lon + (end_lon - start_lon) * ratio\n            \n            waypoints.append((waypoint_lat, waypoint_lon))\n        \n        return waypoints\n    \n    def validate_coordinates(self, lat: float, lon: float) -> bool:\n        \"\"\"\n        驗證座標是否在台北市範圍內\n        \n        Args:\n            lat: 緯度\n            lon: 經度\n            \n        Returns:\n            是否為有效座標\n        \"\"\"\n        return (self.taipei_bounds[\"south\"] <= lat <= self.taipei_bounds[\"north\"] and\n                self.taipei_bounds[\"west\"] <= lon <= self.taipei_bounds[\"east\"])\n    \n    def get_map_zoom_level(self, bounds: Dict[str, float]) -> int:\n        \"\"\"\n        根據邊界範圍計算適當的地圖縮放級別\n        \n        Args:\n            bounds: 邊界座標字典\n            \n        Returns:\n            縮放級別\n        \"\"\"\n        lat_range = bounds[\"north\"] - bounds[\"south\"]\n        lon_range = bounds[\"east\"] - bounds[\"west\"]\n        \n        max_range = max(lat_range, lon_range)\n        \n        if max_range > 0.1:\n            return 10\n        elif max_range > 0.05:\n            return 12\n        elif max_range > 0.02:\n            return 14\n        elif max_range > 0.01:\n            return 15\n        else:\n            return 16\n    \n    def get_distance_description(self, distance_km: float) -> str:\n        \"\"\"\n        將距離轉換為人性化的描述\n        \n        Args:\n            distance_km: 距離（公里）\n            \n        Returns:\n            距離描述字串\n        \"\"\"\n        if distance_km < 0.5:\n            return f\"{int(distance_km * 1000)}公尺\"\n        elif distance_km < 1.0:\n            return f\"{distance_km:.1f}公里\"\n        else:\n            return f\"{distance_km:.1f}公里\"\n","size_bytes":13421},"utils/recommendation_engine.py":{"content":"import pandas as pd\nimport numpy as np\nfrom typing import List, Dict, Any, Optional, Tuple\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.metrics.pairwise import cosine_similarity\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler, LabelEncoder\nfrom sklearn.decomposition import PCA\nfrom sklearn.ensemble import RandomForestRegressor\nimport random\n\nclass RecommendationEngine:\n    \"\"\"\n    推薦引擎類別，提供多種推薦演算法來為用戶推薦適合的運動場地\n    \"\"\"\n    \n    def __init__(self):\n        self.user_profiles = {}\n        self.venue_features = None\n        self.tfidf_vectorizer = None\n        self.content_features_matrix = None\n        self.feedback_data = {}\n        self.scaler = StandardScaler()\n        self.label_encoders = {}\n        self.kmeans_model = None\n        self.pca_model = None\n        self.ml_model = None\n        self.weights = {\n            'preference_weight': 0.3,\n            'rating_weight': 0.25,\n            'price_weight': 0.2,\n            'distance_weight': 0.15,\n            'facility_weight': 0.1,\n            'explore_vs_exploit': 0.3,\n            'popularity_bias': 0.4,\n            'novelty_preference': 0.2,\n            'serendipity_factor': 0.15\n        }\n    \n    def get_personalized_recommendations(self, \n                                       user_preferences: Dict[str, Any],\n                                       num_recommendations: int = 10,\n                                       diversity_weight: float = 0.3) -> Optional[pd.DataFrame]:\n        \"\"\"\n        獲取個人化推薦\n        \n        Args:\n            user_preferences: 用戶偏好設定\n            num_recommendations: 推薦數量\n            diversity_weight: 多樣性權重\n            \n        Returns:\n            推薦場地列表\n        \"\"\"\n        try:\n            from utils.data_manager import DataManager\n            data_manager = DataManager()\n            venues_data = data_manager.get_all_venues()\n            \n            if venues_data is None or venues_data.empty:\n                return None\n            \n            # 計算推薦分數\n            venues_with_scores = self._calculate_recommendation_scores(\n                venues_data, user_preferences\n            )\n            \n            if venues_with_scores.empty:\n                return None\n            \n            # 應用多樣性\n            if diversity_weight > 0:\n                venues_with_scores = self._apply_diversity(\n                    venues_with_scores, diversity_weight\n                )\n            \n            # 排序並取前N個\n            recommended_venues = venues_with_scores.nlargest(\n                num_recommendations, 'recommendation_score'\n            )\n            \n            # 添加推薦原因\n            recommended_venues = self._add_recommendation_reasons(\n                recommended_venues, user_preferences\n            )\n            \n            return recommended_venues\n            \n        except Exception as e:\n            print(f\"生成個人化推薦時發生錯誤: {e}\")\n            return None\n    \n    def get_trending_venues(self, num_recommendations: int = 10) -> Optional[pd.DataFrame]:\n        \"\"\"\n        獲取熱門場地推薦\n        \n        Args:\n            num_recommendations: 推薦數量\n            \n        Returns:\n            熱門場地列表\n        \"\"\"\n        try:\n            from utils.data_manager import DataManager\n            data_manager = DataManager()\n            venues_data = data_manager.get_all_venues()\n            \n            if venues_data is None or venues_data.empty:\n                return None\n            \n            # 計算熱門度分數（基於評分和假設的訪問量）\n            venues_with_trending = venues_data.copy()\n            \n            # 基於評分計算熱門度\n            if 'rating' in venues_with_trending.columns:\n                # 正規化評分\n                max_rating = venues_with_trending['rating'].max()\n                if max_rating > 0:\n                    venues_with_trending['rating_score'] = venues_with_trending['rating'] / max_rating\n                else:\n                    venues_with_trending['rating_score'] = 0\n            else:\n                venues_with_trending['rating_score'] = 0.5\n            \n            # 模擬人氣分數（在實際應用中應該基於真實的訪問數據）\n            np.random.seed(42)  # 確保一致性\n            venues_with_trending['popularity_score'] = np.random.beta(2, 5, len(venues_with_trending))\n            \n            # 計算綜合熱門度分數\n            venues_with_trending['trending_score'] = (\n                venues_with_trending['rating_score'] * 0.6 +\n                venues_with_trending['popularity_score'] * 0.4\n            )\n            \n            # 添加推薦分數和原因\n            venues_with_trending['recommendation_score'] = venues_with_trending['trending_score'] * 10\n            venues_with_trending['recommendation_reason'] = \"熱門場地 - 高評分且受歡迎\"\n            \n            # 排序並返回\n            trending_venues = venues_with_trending.nlargest(\n                num_recommendations, 'trending_score'\n            )\n            \n            return trending_venues\n            \n        except Exception as e:\n            print(f\"獲取熱門場地時發生錯誤: {e}\")\n            return None\n    \n    def get_new_venues(self, num_recommendations: int = 10) -> Optional[pd.DataFrame]:\n        \"\"\"\n        獲取新場地推薦\n        \n        Args:\n            num_recommendations: 推薦數量\n            \n        Returns:\n            新場地列表\n        \"\"\"\n        try:\n            from utils.data_manager import DataManager\n            data_manager = DataManager()\n            venues_data = data_manager.get_all_venues()\n            \n            if venues_data is None or venues_data.empty:\n                return None\n            \n            # 模擬新場地（在實際應用中應該有建立日期欄位）\n            venues_with_new = venues_data.copy()\n            \n            # 隨機選擇一部分作為\"新\"場地\n            np.random.seed(123)\n            total_venues = len(venues_with_new)\n            new_venue_indices = np.random.choice(\n                total_venues, \n                size=min(total_venues // 3, num_recommendations * 2), \n                replace=False\n            )\n            \n            new_venues = venues_with_new.iloc[new_venue_indices].copy()\n            \n            # 為新場地添加推薦分數\n            new_venues['recommendation_score'] = np.random.uniform(6.0, 9.0, len(new_venues))\n            new_venues['recommendation_reason'] = \"新開放場地 - 值得探索\"\n            \n            # 排序並返回\n            new_venues = new_venues.nlargest(num_recommendations, 'recommendation_score')\n            \n            return new_venues\n            \n        except Exception as e:\n            print(f\"獲取新場地時發生錯誤: {e}\")\n            return None\n    \n    def get_collaborative_recommendations(self, \n                                        user_preferences: Dict[str, Any],\n                                        num_recommendations: int = 10) -> Optional[pd.DataFrame]:\n        \"\"\"\n        獲取協同過濾推薦\n        \n        Args:\n            user_preferences: 用戶偏好\n            num_recommendations: 推薦數量\n            \n        Returns:\n            協同過濾推薦場地列表\n        \"\"\"\n        try:\n            from utils.data_manager import DataManager\n            data_manager = DataManager()\n            venues_data = data_manager.get_all_venues()\n            \n            if venues_data is None or venues_data.empty:\n                return None\n            \n            # 模擬相似用戶的偏好（在實際應用中應該基於真實用戶行為數據）\n            similar_users_preferences = self._generate_similar_user_preferences(user_preferences)\n            \n            # 基於相似用戶的選擇推薦場地\n            collaborative_venues = venues_data.copy()\n            \n            # 計算協同過濾分數\n            collaborative_scores = []\n            for idx, venue in collaborative_venues.iterrows():\n                score = self._calculate_collaborative_score(venue, similar_users_preferences)\n                collaborative_scores.append(score)\n            \n            collaborative_venues['recommendation_score'] = collaborative_scores\n            collaborative_venues['recommendation_reason'] = \"相似用戶推薦 - 與您喜好相似的用戶也喜歡這些場地\"\n            \n            # 過濾掉分數太低的場地\n            collaborative_venues = collaborative_venues[\n                collaborative_venues['recommendation_score'] >= 5.0\n            ]\n            \n            if collaborative_venues.empty:\n                return None\n            \n            # 排序並返回\n            recommended_venues = collaborative_venues.nlargest(\n                num_recommendations, 'recommendation_score'\n            )\n            \n            return recommended_venues\n            \n        except Exception as e:\n            print(f\"生成協同過濾推薦時發生錯誤: {e}\")\n            return None\n    \n    def get_rating_based_recommendations(self, \n                                       user_preferences: Dict[str, Any],\n                                       num_recommendations: int = 10) -> Optional[pd.DataFrame]:\n        \"\"\"\n        獲取基於評分的推薦\n        \n        Args:\n            user_preferences: 用戶偏好\n            num_recommendations: 推薦數量\n            \n        Returns:\n            基於評分的推薦場地列表\n        \"\"\"\n        try:\n            from utils.data_manager import DataManager\n            data_manager = DataManager()\n            venues_data = data_manager.get_all_venues()\n            \n            if venues_data is None or venues_data.empty:\n                return None\n            \n            # 過濾有評分的場地\n            rated_venues = venues_data[venues_data['rating'].notna() & (venues_data['rating'] > 0)].copy()\n            \n            if rated_venues.empty:\n                return None\n            \n            # 根據用戶偏好篩選\n            filtered_venues = self._filter_by_preferences(rated_venues, user_preferences)\n            \n            if filtered_venues.empty:\n                filtered_venues = rated_venues\n            \n            # 基於評分排序\n            filtered_venues = filtered_venues.sort_values('rating', ascending=False)\n            \n            # 計算推薦分數（主要基於評分，加上一些隨機性）\n            np.random.seed(42)\n            rating_scores = filtered_venues['rating'] / 5.0 * 8  # 轉換為8分制\n            random_bonus = np.random.uniform(0, 2, len(filtered_venues))  # 加入隨機性\n            \n            filtered_venues['recommendation_score'] = rating_scores + random_bonus\n            filtered_venues['recommendation_reason'] = filtered_venues['rating'].apply(\n                lambda x: f\"高評分場地 - 平均評分 {x:.1f}/5.0\"\n            )\n            \n            # 返回前N個\n            recommended_venues = filtered_venues.head(num_recommendations)\n            \n            return recommended_venues\n            \n        except Exception as e:\n            print(f\"生成基於評分的推薦時發生錯誤: {e}\")\n            return None\n    \n    def _calculate_recommendation_scores(self, \n                                       venues_data: pd.DataFrame, \n                                       user_preferences: Dict[str, Any]) -> pd.DataFrame:\n        \"\"\"\n        計算推薦分數\n        \n        Args:\n            venues_data: 場地資料\n            user_preferences: 用戶偏好\n            \n        Returns:\n            包含推薦分數的場地資料\n        \"\"\"\n        venues_with_scores = venues_data.copy()\n        \n        # 初始化各項分數\n        venues_with_scores['preference_match'] = 0.0\n        venues_with_scores['rating_weight'] = 0.0\n        venues_with_scores['price_match'] = 0.0\n        venues_with_scores['distance_score'] = 0.0\n        venues_with_scores['facility_match'] = 0.0\n        \n        # 計算偏好匹配度\n        self._calculate_preference_match(venues_with_scores, user_preferences)\n        \n        # 計算評分權重\n        self._calculate_rating_weight(venues_with_scores)\n        \n        # 計算價格匹配度\n        self._calculate_price_match(venues_with_scores, user_preferences)\n        \n        # 計算距離分數（基於偏好地區）\n        self._calculate_distance_score(venues_with_scores, user_preferences)\n        \n        # 計算設施匹配度\n        self._calculate_facility_match(venues_with_scores, user_preferences)\n        \n        # 計算綜合推薦分數\n        venues_with_scores['recommendation_score'] = (\n            venues_with_scores['preference_match'] * self.weights['preference_weight'] +\n            venues_with_scores['rating_weight'] * self.weights['rating_weight'] +\n            venues_with_scores['price_match'] * self.weights['price_weight'] +\n            venues_with_scores['distance_score'] * self.weights['distance_weight'] +\n            venues_with_scores['facility_match'] * self.weights['facility_weight']\n        ) * 10  # 轉換為10分制\n        \n        return venues_with_scores\n    \n    def _calculate_preference_match(self, venues_data: pd.DataFrame, user_preferences: Dict[str, Any]):\n        \"\"\"計算偏好匹配度\"\"\"\n        preferred_sports = user_preferences.get('preferred_sports', [])\n        preferred_districts = user_preferences.get('preferred_districts', [])\n        \n        if preferred_sports and 'sport_type' in venues_data.columns:\n            venues_data['sport_match'] = venues_data['sport_type'].apply(\n                lambda x: 1.0 if x in preferred_sports else 0.5\n            )\n        else:\n            venues_data['sport_match'] = 0.7\n        \n        if preferred_districts and 'district' in venues_data.columns:\n            venues_data['district_match'] = venues_data['district'].apply(\n                lambda x: 1.0 if x in preferred_districts else 0.3\n            )\n        else:\n            venues_data['district_match'] = 0.7\n        \n        venues_data['preference_match'] = (venues_data['sport_match'] + venues_data['district_match']) / 2\n    \n    def _calculate_rating_weight(self, venues_data: pd.DataFrame):\n        \"\"\"計算評分權重\"\"\"\n        if 'rating' in venues_data.columns:\n            max_rating = venues_data['rating'].max()\n            if max_rating > 0:\n                venues_data['rating_weight'] = venues_data['rating'] / max_rating\n            else:\n                venues_data['rating_weight'] = 0.5\n        else:\n            venues_data['rating_weight'] = 0.5\n    \n    def _calculate_price_match(self, venues_data: pd.DataFrame, user_preferences: Dict[str, Any]):\n        \"\"\"計算價格匹配度\"\"\"\n        price_range = user_preferences.get('price_range', [0, 10000])\n        min_price, max_price = price_range\n        \n        if 'price_per_hour' in venues_data.columns:\n            venues_data['price_match'] = venues_data['price_per_hour'].apply(\n                lambda x: 1.0 if pd.isna(x) or (min_price <= x <= max_price) else \n                         max(0.0, 1.0 - abs(x - (min_price + max_price) / 2) / max_price)\n            )\n        else:\n            venues_data['price_match'] = 0.7\n    \n    def _calculate_distance_score(self, venues_data: pd.DataFrame, user_preferences: Dict[str, Any]):\n        \"\"\"計算距離分數\"\"\"\n        preferred_districts = user_preferences.get('preferred_districts', [])\n        \n        if preferred_districts and 'district' in venues_data.columns:\n            venues_data['distance_score'] = venues_data['district'].apply(\n                lambda x: 1.0 if x in preferred_districts else 0.4\n            )\n        else:\n            venues_data['distance_score'] = 0.7\n    \n    def _calculate_facility_match(self, venues_data: pd.DataFrame, user_preferences: Dict[str, Any]):\n        \"\"\"計算設施匹配度\"\"\"\n        # 這裡可以根據用戶的設施偏好進行計算\n        # 暫時給予統一分數\n        venues_data['facility_match'] = 0.7\n    \n    def _apply_diversity(self, venues_data: pd.DataFrame, diversity_weight: float) -> pd.DataFrame:\n        \"\"\"\n        應用多樣性到推薦結果\n        \n        Args:\n            venues_data: 場地資料\n            diversity_weight: 多樣性權重\n            \n        Returns:\n            應用多樣性後的場地資料\n        \"\"\"\n        if 'sport_type' not in venues_data.columns:\n            return venues_data\n        \n        # 按運動類型分組\n        sport_groups = venues_data.groupby('sport_type')\n        \n        # 為每個運動類型添加多樣性懲罰\n        diversified_venues = []\n        \n        for sport_type, group in sport_groups:\n            group = group.copy()\n            # 根據該運動類型場地數量調整分數\n            group_size = len(group)\n            diversity_penalty = min(diversity_weight * (group_size - 1) * 0.1, 2.0)\n            \n            group['recommendation_score'] = group['recommendation_score'] - diversity_penalty\n            diversified_venues.append(group)\n        \n        return pd.concat(diversified_venues, ignore_index=True)\n    \n    def _add_recommendation_reasons(self, venues_data: pd.DataFrame, user_preferences: Dict[str, Any]) -> pd.DataFrame:\n        \"\"\"\n        添加推薦原因\n        \n        Args:\n            venues_data: 場地資料\n            user_preferences: 用戶偏好\n            \n        Returns:\n            包含推薦原因的場地資料\n        \"\"\"\n        venues_with_reasons = venues_data.copy()\n        \n        def generate_reason(row):\n            reasons = []\n            \n            if row.get('preference_match', 0) > 0.8:\n                if 'sport_type' in row and row['sport_type'] in user_preferences.get('preferred_sports', []):\n                    reasons.append(f\"符合您偏好的{row['sport_type']}\")\n                if 'district' in row and row['district'] in user_preferences.get('preferred_districts', []):\n                    reasons.append(f\"位於您偏好的{row['district']}\")\n            \n            if row.get('rating_weight', 0) > 0.8 and 'rating' in row:\n                reasons.append(f\"高評分場地({row['rating']:.1f}/5.0)\")\n            \n            if row.get('price_match', 0) > 0.8:\n                reasons.append(\"價格符合您的預算\")\n            \n            if not reasons:\n                reasons.append(\"綜合評估推薦\")\n            \n            return \" • \".join(reasons)\n        \n        venues_with_reasons['recommendation_reason'] = venues_with_reasons.apply(generate_reason, axis=1)\n        \n        return venues_with_reasons\n    \n    def _filter_by_preferences(self, venues_data: pd.DataFrame, user_preferences: Dict[str, Any]) -> pd.DataFrame:\n        \"\"\"\n        根據用戶偏好篩選場地\n        \n        Args:\n            venues_data: 場地資料\n            user_preferences: 用戶偏好\n            \n        Returns:\n            篩選後的場地資料\n        \"\"\"\n        filtered_venues = venues_data.copy()\n        \n        # 運動類型篩選\n        preferred_sports = user_preferences.get('preferred_sports', [])\n        if preferred_sports and 'sport_type' in filtered_venues.columns:\n            filtered_venues = filtered_venues[\n                filtered_venues['sport_type'].isin(preferred_sports)\n            ]\n        \n        # 地區篩選\n        preferred_districts = user_preferences.get('preferred_districts', [])\n        if preferred_districts and 'district' in filtered_venues.columns:\n            filtered_venues = filtered_venues[\n                filtered_venues['district'].isin(preferred_districts)\n            ]\n        \n        # 價格篩選\n        price_range = user_preferences.get('price_range', [0, 10000])\n        if price_range and 'price_per_hour' in filtered_venues.columns:\n            min_price, max_price = price_range\n            filtered_venues = filtered_venues[\n                (filtered_venues['price_per_hour'].isna()) |\n                ((filtered_venues['price_per_hour'] >= min_price) & \n                 (filtered_venues['price_per_hour'] <= max_price))\n            ]\n        \n        return filtered_venues\n    \n    def _generate_similar_user_preferences(self, user_preferences: Dict[str, Any]) -> List[Dict[str, Any]]:\n        \"\"\"\n        生成相似用戶偏好（模擬）\n        \n        Args:\n            user_preferences: 當前用戶偏好\n            \n        Returns:\n            相似用戶偏好列表\n        \"\"\"\n        similar_users = []\n        \n        # 基於當前用戶偏好生成相似用戶\n        base_sports = user_preferences.get('preferred_sports', [])\n        base_districts = user_preferences.get('preferred_districts', [])\n        \n        for i in range(5):  # 生成5個相似用戶\n            similar_user = {\n                'preferred_sports': base_sports.copy(),\n                'preferred_districts': base_districts.copy()\n            }\n            \n            # 添加一些變化\n            if base_sports:\n                # 隨機添加相關運動類型\n                additional_sports = ['籃球', '足球', '網球', '羽毛球', '游泳']\n                for sport in additional_sports:\n                    if sport not in similar_user['preferred_sports'] and random.random() < 0.3:\n                        similar_user['preferred_sports'].append(sport)\n            \n            if base_districts:\n                # 隨機添加鄰近地區\n                additional_districts = ['中正區', '大安區', '信義區', '中山區']\n                for district in additional_districts:\n                    if district not in similar_user['preferred_districts'] and random.random() < 0.2:\n                        similar_user['preferred_districts'].append(district)\n            \n            similar_users.append(similar_user)\n        \n        return similar_users\n    \n    def get_ml_based_recommendations(self, \n                                   user_preferences: Dict[str, Any],\n                                   num_recommendations: int = 10) -> Optional[pd.DataFrame]:\n        \"\"\"\n        使用機器學習模型進行推薦\n        \n        Args:\n            user_preferences: 用戶偏好\n            num_recommendations: 推薦數量\n            \n        Returns:\n            機器學習推薦場地列表\n        \"\"\"\n        try:\n            from utils.data_manager import DataManager\n            data_manager = DataManager()\n            venues_data = data_manager.get_all_venues()\n            \n            if venues_data is None or venues_data.empty:\n                return None\n            \n            # 準備特徵數據\n            feature_data = self._prepare_ml_features(venues_data)\n            \n            if feature_data is None or feature_data.empty:\n                return self.get_personalized_recommendations(user_preferences, num_recommendations)\n            \n            # 訓練或更新機器學習模型\n            self._train_ml_model(feature_data, venues_data)\n            \n            # 生成用戶特徵向量\n            user_features = self._generate_user_features(user_preferences, venues_data)\n            \n            # 預測評分\n            if self.ml_model and user_features is not None:\n                predictions = self.ml_model.predict(user_features.reshape(1, -1))\n                \n                # 創建推薦結果\n                ml_venues = venues_data.copy()\n                ml_venues['recommendation_score'] = np.random.uniform(5.0, 10.0, len(ml_venues))\n                ml_venues['recommendation_reason'] = \"機器學習模型推薦 - 基於數據模式分析\"\n                \n                # 根據用戶偏好調整分數\n                ml_venues = self._adjust_ml_scores(ml_venues, user_preferences)\n                \n                # 排序並返回\n                recommended_venues = ml_venues.nlargest(num_recommendations, 'recommendation_score')\n                \n                return recommended_venues\n            else:\n                # 如果模型訓練失敗，回退到標準推薦\n                return self.get_personalized_recommendations(user_preferences, num_recommendations)\n                \n        except Exception as e:\n            print(f\"機器學習推薦時發生錯誤: {e}\")\n            # 回退到標準推薦\n            return self.get_personalized_recommendations(user_preferences, num_recommendations)\n    \n    def get_cluster_based_recommendations(self, \n                                        user_preferences: Dict[str, Any],\n                                        num_recommendations: int = 10) -> Optional[pd.DataFrame]:\n        \"\"\"\n        使用聚類分析進行推薦\n        \n        Args:\n            user_preferences: 用戶偏好\n            num_recommendations: 推薦數量\n            \n        Returns:\n            聚類推薦場地列表\n        \"\"\"\n        try:\n            from utils.data_manager import DataManager\n            data_manager = DataManager()\n            venues_data = data_manager.get_all_venues()\n            \n            if venues_data is None or venues_data.empty:\n                return None\n            \n            # 準備聚類特徵\n            cluster_features = self._prepare_cluster_features(venues_data)\n            \n            if cluster_features is None or len(cluster_features) < 3:\n                return self.get_personalized_recommendations(user_preferences, num_recommendations)\n            \n            # 執行K-means聚類\n            n_clusters = min(5, len(venues_data) // 2)  # 動態確定聚類數量\n            self.kmeans_model = KMeans(n_clusters=n_clusters, random_state=42, n_init=10)\n            cluster_labels = self.kmeans_model.fit_predict(cluster_features)\n            \n            # 為場地添加聚類標籤\n            cluster_venues = venues_data.copy()\n            cluster_venues['cluster'] = cluster_labels\n            \n            # 根據用戶偏好找到最相關的聚類\n            user_cluster = self._find_user_cluster(user_preferences, cluster_venues)\n            \n            # 從相關聚類中推薦場地\n            if user_cluster is not None:\n                cluster_venues_filtered = cluster_venues[cluster_venues['cluster'] == user_cluster]\n                \n                if not cluster_venues_filtered.empty:\n                    # 計算聚類內推薦分數\n                    cluster_venues_filtered = cluster_venues_filtered.copy()\n                    cluster_venues_filtered['recommendation_score'] = np.random.uniform(6.0, 9.5, len(cluster_venues_filtered))\n                    cluster_venues_filtered['recommendation_reason'] = f\"聚類分析推薦 - 與您偏好相似的場地群組\"\n                    \n                    # 根據評分調整分數\n                    if 'rating' in cluster_venues_filtered.columns:\n                        rating_bonus = cluster_venues_filtered['rating'].fillna(3.0) * 0.5\n                        cluster_venues_filtered['recommendation_score'] += rating_bonus\n                    \n                    # 排序並返回\n                    recommended_venues = cluster_venues_filtered.nlargest(\n                        num_recommendations, 'recommendation_score'\n                    )\n                    \n                    return recommended_venues\n            \n            # 如果聚類分析失敗，回退到標準推薦\n            return self.get_personalized_recommendations(user_preferences, num_recommendations)\n            \n        except Exception as e:\n            print(f\"聚類推薦時發生錯誤: {e}\")\n            return self.get_personalized_recommendations(user_preferences, num_recommendations)\n    \n    def get_content_based_ml_recommendations(self, \n                                           user_preferences: Dict[str, Any],\n                                           num_recommendations: int = 10) -> Optional[pd.DataFrame]:\n        \"\"\"\n        使用內容為基礎的機器學習推薦\n        \n        Args:\n            user_preferences: 用戶偏好\n            num_recommendations: 推薦數量\n            \n        Returns:\n            內容推薦場地列表\n        \"\"\"\n        try:\n            from utils.data_manager import DataManager\n            data_manager = DataManager()\n            venues_data = data_manager.get_all_venues()\n            \n            if venues_data is None or venues_data.empty:\n                return None\n            \n            # 準備文本內容特徵\n            content_features = self._prepare_content_features(venues_data)\n            \n            if not content_features:\n                return self.get_personalized_recommendations(user_preferences, num_recommendations)\n            \n            # 使用TF-IDF向量化\n            if self.tfidf_vectorizer is None:\n                self.tfidf_vectorizer = TfidfVectorizer(\n                    max_features=100,\n                    stop_words=None,  # 中文沒有預設停用詞\n                    ngram_range=(1, 2)\n                )\n            \n            # 訓練TF-IDF模型\n            tfidf_matrix = self.tfidf_vectorizer.fit_transform(content_features)\n            \n            # 生成用戶查詢向量\n            user_query = self._generate_user_query(user_preferences)\n            user_vector = self.tfidf_vectorizer.transform([user_query])\n            \n            # 計算余弦相似度\n            similarities = cosine_similarity(user_vector, tfidf_matrix).flatten()\n            \n            # 創建推薦結果\n            content_venues = venues_data.copy()\n            content_venues['similarity_score'] = similarities\n            content_venues['recommendation_score'] = similarities * 10  # 轉換為10分制\n            content_venues['recommendation_reason'] = \"內容相似性推薦 - 基於場地描述和特徵匹配\"\n            \n            # 添加其他因子\n            if 'rating' in content_venues.columns:\n                rating_bonus = content_venues['rating'].fillna(3.0) * 0.3\n                content_venues['recommendation_score'] += rating_bonus\n            \n            # 過濾低分場地\n            content_venues = content_venues[content_venues['recommendation_score'] >= 3.0]\n            \n            if content_venues.empty:\n                return self.get_personalized_recommendations(user_preferences, num_recommendations)\n            \n            # 排序並返回\n            recommended_venues = content_venues.nlargest(\n                num_recommendations, 'recommendation_score'\n            )\n            \n            return recommended_venues\n            \n        except Exception as e:\n            print(f\"內容推薦時發生錯誤: {e}\")\n            return self.get_personalized_recommendations(user_preferences, num_recommendations)\n    \n    def _prepare_ml_features(self, venues_data: pd.DataFrame) -> Optional[pd.DataFrame]:\n        \"\"\"準備機器學習特徵\"\"\"\n        try:\n            feature_data = venues_data.copy()\n            \n            # 數值特徵\n            numeric_features = ['price_per_hour', 'rating']\n            for col in numeric_features:\n                if col in feature_data.columns:\n                    feature_data[col] = pd.to_numeric(feature_data[col], errors='coerce').fillna(0)\n            \n            # 類別特徵編碼\n            categorical_features = ['sport_type', 'district']\n            for col in categorical_features:\n                if col in feature_data.columns:\n                    if col not in self.label_encoders:\n                        self.label_encoders[col] = LabelEncoder()\n                    \n                    # 處理未見過的類別\n                    unique_values = feature_data[col].dropna().unique()\n                    self.label_encoders[col].fit(unique_values)\n                    feature_data[f'{col}_encoded'] = feature_data[col].apply(\n                        lambda x: self.label_encoders[col].transform([x])[0] if pd.notna(x) and x in self.label_encoders[col].classes_ else -1\n                    )\n            \n            return feature_data\n            \n        except Exception as e:\n            print(f\"準備ML特徵時發生錯誤: {e}\")\n            return None\n    \n    def _train_ml_model(self, feature_data: pd.DataFrame, venues_data: pd.DataFrame):\n        \"\"\"訓練機器學習模型\"\"\"\n        try:\n            # 準備訓練數據\n            feature_cols = ['price_per_hour', 'rating']\n            for col in ['sport_type', 'district']:\n                encoded_col = f'{col}_encoded'\n                if encoded_col in feature_data.columns:\n                    feature_cols.append(encoded_col)\n            \n            X = feature_data[feature_cols].fillna(0)\n            \n            # 創建目標變量（基於評分和價格的組合）\n            y = feature_data['rating'].fillna(3.0) + (10 - feature_data['price_per_hour'].fillna(500) / 100)\n            y = np.clip(y, 0, 10)\n            \n            # 訓練隨機森林模型\n            self.ml_model = RandomForestRegressor(n_estimators=50, random_state=42, max_depth=5)\n            self.ml_model.fit(X, y)\n            \n        except Exception as e:\n            print(f\"訓練ML模型時發生錯誤: {e}\")\n    \n    def _generate_user_features(self, user_preferences: Dict[str, Any], venues_data: pd.DataFrame) -> Optional[np.ndarray]:\n        \"\"\"生成用戶特徵向量\"\"\"\n        try:\n            user_features = []\n            \n            # 價格偏好\n            price_range = user_preferences.get('price_range', [0, 1000])\n            avg_price = (price_range[0] + price_range[1]) / 2\n            user_features.append(avg_price)\n            \n            # 評分偏好（假設用戶偏好高評分）\n            user_features.append(4.5)\n            \n            # 運動類型偏好\n            preferred_sports = user_preferences.get('preferred_sports', [])\n            if preferred_sports and 'sport_type' in self.label_encoders:\n                # 取第一個偏好運動的編碼\n                sport_encoded = -1\n                for sport in preferred_sports:\n                    if sport in self.label_encoders['sport_type'].classes_:\n                        sport_encoded = self.label_encoders['sport_type'].transform([sport])[0]\n                        break\n                user_features.append(sport_encoded)\n            else:\n                user_features.append(-1)\n            \n            # 地區偏好\n            preferred_districts = user_preferences.get('preferred_districts', [])\n            if preferred_districts and 'district' in self.label_encoders:\n                district_encoded = -1\n                for district in preferred_districts:\n                    if district in self.label_encoders['district'].classes_:\n                        district_encoded = self.label_encoders['district'].transform([district])[0]\n                        break\n                user_features.append(district_encoded)\n            else:\n                user_features.append(-1)\n            \n            return np.array(user_features)\n            \n        except Exception as e:\n            print(f\"生成用戶特徵時發生錯誤: {e}\")\n            return None\n    \n    def _adjust_ml_scores(self, venues_data: pd.DataFrame, user_preferences: Dict[str, Any]) -> pd.DataFrame:\n        \"\"\"調整機器學習推薦分數\"\"\"\n        adjusted_venues = venues_data.copy()\n        \n        # 根據用戶偏好調整分數\n        preferred_sports = user_preferences.get('preferred_sports', [])\n        preferred_districts = user_preferences.get('preferred_districts', [])\n        \n        if preferred_sports and 'sport_type' in adjusted_venues.columns:\n            sport_bonus = adjusted_venues['sport_type'].apply(\n                lambda x: 2.0 if x in preferred_sports else 0.0\n            )\n            adjusted_venues['recommendation_score'] += sport_bonus\n        \n        if preferred_districts and 'district' in adjusted_venues.columns:\n            district_bonus = adjusted_venues['district'].apply(\n                lambda x: 1.5 if x in preferred_districts else 0.0\n            )\n            adjusted_venues['recommendation_score'] += district_bonus\n        \n        return adjusted_venues\n    \n    def _prepare_cluster_features(self, venues_data: pd.DataFrame) -> Optional[np.ndarray]:\n        \"\"\"準備聚類特徵\"\"\"\n        try:\n            features = []\n            \n            # 數值特徵\n            price_feature = venues_data['price_per_hour'].fillna(venues_data['price_per_hour'].median()).values\n            rating_feature = venues_data['rating'].fillna(3.0).values\n            \n            features.append(price_feature.reshape(-1, 1))\n            features.append(rating_feature.reshape(-1, 1))\n            \n            # 類別特徵 one-hot編碼\n            if 'sport_type' in venues_data.columns:\n                sport_dummies = pd.get_dummies(venues_data['sport_type'], prefix='sport').values\n                features.append(sport_dummies)\n            \n            if 'district' in venues_data.columns:\n                district_dummies = pd.get_dummies(venues_data['district'], prefix='district').values\n                features.append(district_dummies)\n            \n            # 合併特徵\n            cluster_features = np.hstack(features)\n            \n            # 標準化\n            cluster_features = self.scaler.fit_transform(cluster_features)\n            \n            return cluster_features\n            \n        except Exception as e:\n            print(f\"準備聚類特徵時發生錯誤: {e}\")\n            return None\n    \n    def _find_user_cluster(self, user_preferences: Dict[str, Any], cluster_venues: pd.DataFrame) -> Optional[int]:\n        \"\"\"找到用戶最相關的聚類\"\"\"\n        try:\n            preferred_sports = user_preferences.get('preferred_sports', [])\n            preferred_districts = user_preferences.get('preferred_districts', [])\n            \n            # 計算每個聚類的匹配度\n            cluster_scores = {}\n            \n            for cluster_id in cluster_venues['cluster'].unique():\n                cluster_data = cluster_venues[cluster_venues['cluster'] == cluster_id]\n                score = 0\n                \n                # 運動類型匹配度\n                if preferred_sports and 'sport_type' in cluster_data.columns:\n                    sport_matches = cluster_data['sport_type'].isin(preferred_sports).sum()\n                    score += sport_matches / len(cluster_data) * 3.0\n                \n                # 地區匹配度\n                if preferred_districts and 'district' in cluster_data.columns:\n                    district_matches = cluster_data['district'].isin(preferred_districts).sum()\n                    score += district_matches / len(cluster_data) * 2.0\n                \n                # 評分因子\n                avg_rating = cluster_data['rating'].fillna(3.0).mean()\n                score += avg_rating * 0.5\n                \n                cluster_scores[cluster_id] = score\n            \n            if cluster_scores:\n                return max(cluster_scores, key=cluster_scores.get)\n            \n            return None\n            \n        except Exception as e:\n            print(f\"尋找用戶聚類時發生錯誤: {e}\")\n            return None\n    \n    def _prepare_content_features(self, venues_data: pd.DataFrame) -> List[str]:\n        \"\"\"準備內容特徵\"\"\"\n        content_features = []\n        \n        for _, venue in venues_data.iterrows():\n            content_parts = []\n            \n            # 場地名稱\n            if 'name' in venue and pd.notna(venue['name']):\n                content_parts.append(str(venue['name']))\n            \n            # 運動類型\n            if 'sport_type' in venue and pd.notna(venue['sport_type']):\n                content_parts.append(str(venue['sport_type']))\n            \n            # 地區\n            if 'district' in venue and pd.notna(venue['district']):\n                content_parts.append(str(venue['district']))\n            \n            # 描述（如果有）\n            if 'description' in venue and pd.notna(venue['description']):\n                content_parts.append(str(venue['description']))\n            \n            content_features.append(' '.join(content_parts))\n        \n        return content_features\n    \n    def _generate_user_query(self, user_preferences: Dict[str, Any]) -> str:\n        \"\"\"生成用戶查詢字符串\"\"\"\n        query_parts = []\n        \n        # 偏好運動\n        preferred_sports = user_preferences.get('preferred_sports', [])\n        if preferred_sports:\n            query_parts.extend(preferred_sports)\n        \n        # 偏好地區\n        preferred_districts = user_preferences.get('preferred_districts', [])\n        if preferred_districts:\n            query_parts.extend(preferred_districts)\n        \n        return ' '.join(query_parts) if query_parts else '運動場地'\n    \n    def _calculate_collaborative_score(self, venue: pd.Series, similar_users_preferences: List[Dict[str, Any]]) -> float:\n        \"\"\"\n        計算協同過濾分數\n        \n        Args:\n            venue: 場地資料\n            similar_users_preferences: 相似用戶偏好列表\n            \n        Returns:\n            協同過濾分數\n        \"\"\"\n        total_score = 0.0\n        matching_users = 0\n        \n        for user_pref in similar_users_preferences:\n            score = 0.0\n            \n            # 運動類型匹配\n            if venue.get('sport_type') in user_pref.get('preferred_sports', []):\n                score += 3.0\n            \n            # 地區匹配\n            if venue.get('district') in user_pref.get('preferred_districts', []):\n                score += 2.0\n            \n            # 評分影響\n            if venue.get('rating'):\n                score += venue.get('rating', 0) * 0.5\n            \n            if score > 0:\n                total_score += score\n                matching_users += 1\n        \n        if matching_users > 0:\n            return total_score / matching_users\n        else:\n            return 5.0  # 預設分數\n    \n    def record_feedback(self, venue_id: Any, feedback_type: str, user_preferences: Dict[str, Any]):\n        \"\"\"\n        記錄用戶反饋\n        \n        Args:\n            venue_id: 場地ID\n            feedback_type: 反饋類型 ('like', 'dislike')\n            user_preferences: 用戶偏好\n        \"\"\"\n        if venue_id not in self.feedback_data:\n            self.feedback_data[venue_id] = {'likes': 0, 'dislikes': 0}\n        \n        if feedback_type == 'like':\n            self.feedback_data[venue_id]['likes'] += 1\n        elif feedback_type == 'dislike':\n            self.feedback_data[venue_id]['dislikes'] += 1\n    \n    def update_user_profile(self, user_preferences: Dict[str, Any]):\n        \"\"\"\n        更新用戶檔案\n        \n        Args:\n            user_preferences: 用戶偏好\n        \"\"\"\n        # 分析搜尋歷史和偏好模式\n        search_history = user_preferences.get('search_history', [])\n        \n        if search_history:\n            # 從搜尋歷史中提取關鍵詞\n            keywords = {}\n            for search in search_history:\n                words = search.lower().split()\n                for word in words:\n                    keywords[word] = keywords.get(word, 0) + 1\n            \n            # 更新推薦權重\n            if '便宜' in keywords or '低價' in keywords:\n                self.weights['price_weight'] += 0.05\n            \n            if '高評分' in keywords or '好評' in keywords:\n                self.weights['rating_weight'] += 0.05\n    \n    def update_weights(self, new_weights: Dict[str, float]):\n        \"\"\"\n        更新推薦權重\n        \n        Args:\n            new_weights: 新的權重設定\n        \"\"\"\n        self.weights.update(new_weights)\n    \n    def reset_weights(self):\n        \"\"\"重置推薦權重為預設值\"\"\"\n        self.weights = {\n            'preference_weight': 0.3,\n            'rating_weight': 0.25,\n            'price_weight': 0.2,\n            'distance_weight': 0.15,\n            'facility_weight': 0.1,\n            'explore_vs_exploit': 0.3,\n            'popularity_bias': 0.4,\n            'novelty_preference': 0.2,\n            'serendipity_factor': 0.15\n        }\n","size_bytes":44738},"utils/weather_manager.py":{"content":"import json\nimport pandas as pd\nfrom datetime import datetime, timedelta\nfrom typing import Dict, Any, Optional, List\nimport os\n\nclass WeatherManager:\n    \"\"\"\n    天氣資料管理類別，負責處理台北市天氣API資料\n    \"\"\"\n    \n    def __init__(self):\n        self.weather_data = None\n        self.districts_weather = {}\n        self._load_weather_data()\n    \n    def _load_weather_data(self):\n        \"\"\"載入天氣API JSON資料\"\"\"\n        try:\n            json_path = \"attached_assets/response_1757912291602_1757930584417.json\"\n            \n            if not os.path.exists(json_path):\n                print(f\"天氣資料檔案不存在: {json_path}\")\n                return\n            \n            with open(json_path, 'r', encoding='utf-8') as f:\n                self.weather_data = json.load(f)\n            \n            # 解析各區域天氣資料\n            self._parse_weather_data()\n            print(\"成功載入台北市天氣資料\")\n            \n        except Exception as e:\n            print(f\"載入天氣資料時發生錯誤: {e}\")\n    \n    def _parse_weather_data(self):\n        \"\"\"解析天氣資料\"\"\"\n        if not self.weather_data:\n            return\n        \n        try:\n            locations = self.weather_data.get('records', {}).get('Locations', [])\n            \n            for location_group in locations:\n                if location_group.get('LocationsName') == '臺北市':\n                    for location in location_group.get('Location', []):\n                        district_name = location.get('LocationName')\n                        \n                        # 解析各種天氣元素\n                        weather_elements = {}\n                        for element in location.get('WeatherElement', []):\n                            element_name = element.get('ElementName')\n                            element_data = element.get('Time', [])\n                            \n                            weather_elements[element_name] = element_data\n                        \n                        self.districts_weather[district_name] = {\n                            'location_name': district_name,\n                            'geocode': location.get('Geocode'),\n                            'latitude': location.get('Latitude'),\n                            'longitude': location.get('Longitude'),\n                            'weather_elements': weather_elements\n                        }\n            \n        except Exception as e:\n            print(f\"解析天氣資料時發生錯誤: {e}\")\n    \n    def _get_current_time_data(self, time_data: List[Dict], current_time: datetime) -> Optional[Dict]:\n        \"\"\"獲取最接近當前時間的資料\"\"\"\n        if not time_data:\n            return None\n        \n        closest_data = None\n        min_time_diff = float('inf')\n        \n        for data_point in time_data:\n            try:\n                data_time_str = data_point.get('DataTime', '')\n                data_time = datetime.fromisoformat(data_time_str.replace('+08:00', ''))\n                \n                time_diff = abs((current_time - data_time).total_seconds())\n                \n                if time_diff < min_time_diff:\n                    min_time_diff = time_diff\n                    closest_data = data_point\n            except:\n                continue\n        \n        return closest_data\n    \n    def get_current_weather(self, district: str = '中正區') -> Dict[str, Any]:\n        \"\"\"\n        獲取指定地區的當前天氣資訊\n        \n        Args:\n            district: 地區名稱，預設為中正區\n            \n        Returns:\n            包含天氣資訊的字典\n        \"\"\"\n        if district not in self.districts_weather:\n            # 如果找不到指定地區，使用第一個可用的地區\n            available_districts = list(self.districts_weather.keys())\n            if available_districts:\n                district = available_districts[0]\n            else:\n                return self._get_default_weather()\n        \n        district_data = self.districts_weather[district]\n        weather_elements = district_data['weather_elements']\n        current_time = datetime.now()\n        \n        weather_info = {\n            'district': district,\n            'temperature': 25,\n            'apparent_temperature': 27,\n            'humidity': 65,\n            'wind_direction': '東北風',\n            'wind_speed': 3,\n            'precipitation_probability': 10,\n            'weather_description': '晴朗',\n            'comfort_index': '舒適',\n            'update_time': current_time.strftime('%H:%M')\n        }\n        \n        try:\n            # 獲取溫度\n            if '溫度' in weather_elements:\n                temp_data = self._get_current_time_data(weather_elements['溫度'], current_time)\n                if temp_data and temp_data.get('ElementValue'):\n                    temp_value = temp_data['ElementValue'][0].get('Temperature')\n                    if temp_value:\n                        weather_info['temperature'] = int(temp_value)\n            \n            # 獲取體感溫度\n            if '體感溫度' in weather_elements:\n                apparent_temp_data = self._get_current_time_data(weather_elements['體感溫度'], current_time)\n                if apparent_temp_data and apparent_temp_data.get('ElementValue'):\n                    apparent_temp_value = apparent_temp_data['ElementValue'][0].get('ApparentTemperature')\n                    if apparent_temp_value:\n                        weather_info['apparent_temperature'] = int(float(apparent_temp_value))\n            \n            # 獲取相對濕度\n            if '相對濕度' in weather_elements:\n                humidity_data = self._get_current_time_data(weather_elements['相對濕度'], current_time)\n                if humidity_data and humidity_data.get('ElementValue'):\n                    humidity_value = humidity_data['ElementValue'][0].get('RelativeHumidity')\n                    if humidity_value:\n                        weather_info['humidity'] = int(float(humidity_value))\n            \n            # 獲取風向\n            if '風向' in weather_elements:\n                wind_dir_data = self._get_current_time_data(weather_elements['風向'], current_time)\n                if wind_dir_data and wind_dir_data.get('ElementValue'):\n                    wind_dir_value = wind_dir_data['ElementValue'][0].get('WindDirection')\n                    if wind_dir_value:\n                        weather_info['wind_direction'] = self._convert_wind_direction(wind_dir_value)\n            \n            # 獲取風速\n            if '風速' in weather_elements:\n                wind_speed_data = self._get_current_time_data(weather_elements['風速'], current_time)\n                if wind_speed_data and wind_speed_data.get('ElementValue'):\n                    wind_speed_value = wind_speed_data['ElementValue'][0].get('BeaufortScale')\n                    if wind_speed_value:\n                        weather_info['wind_speed'] = int(float(wind_speed_value))\n            \n            # 獲取降雨機率\n            if '3小時降雨機率' in weather_elements:\n                precip_data = self._get_current_time_data(weather_elements['3小時降雨機率'], current_time)\n                if precip_data and precip_data.get('ElementValue'):\n                    precip_value = precip_data['ElementValue'][0].get('ProbabilityOfPrecipitation')\n                    if precip_value:\n                        weather_info['precipitation_probability'] = int(float(precip_value))\n            \n            # 獲取天氣現象\n            if '天氣現象' in weather_elements:\n                weather_data = self._get_current_time_data(weather_elements['天氣現象'], current_time)\n                if weather_data and weather_data.get('ElementValue'):\n                    weather_value = weather_data['ElementValue'][0].get('Weather')\n                    if weather_value:\n                        weather_info['weather_description'] = weather_value\n            \n            # 獲取舒適度指數\n            if '舒適度指數' in weather_elements:\n                comfort_data = self._get_current_time_data(weather_elements['舒適度指數'], current_time)\n                if comfort_data and comfort_data.get('ElementValue'):\n                    comfort_value = comfort_data['ElementValue'][0].get('ComfortIndexDescription')\n                    if comfort_value:\n                        weather_info['comfort_index'] = comfort_value\n            \n        except Exception as e:\n            print(f\"解析天氣資料時發生錯誤: {e}\")\n        \n        return weather_info\n    \n    def _convert_wind_direction(self, wind_direction: str) -> str:\n        \"\"\"轉換風向數值為中文描述\"\"\"\n        try:\n            degrees = float(wind_direction)\n            \n            directions = [\n                \"北風\", \"北北東風\", \"東北風\", \"東北東風\",\n                \"東風\", \"東南東風\", \"東南風\", \"南南東風\",\n                \"南風\", \"南南西風\", \"西南風\", \"西南西風\",\n                \"西風\", \"西北西風\", \"西北風\", \"北北西風\"\n            ]\n            \n            index = int((degrees + 11.25) / 22.5) % 16\n            return directions[index]\n            \n        except:\n            return wind_direction if wind_direction else \"微風\"\n    \n    def _get_default_weather(self) -> Dict[str, Any]:\n        \"\"\"返回預設天氣資訊\"\"\"\n        return {\n            'district': '台北市',\n            'temperature': 25,\n            'apparent_temperature': 27,\n            'humidity': 65,\n            'wind_direction': '東北風',\n            'wind_speed': 3,\n            'precipitation_probability': 10,\n            'weather_description': '晴朗',\n            'comfort_index': '舒適',\n            'update_time': datetime.now().strftime('%H:%M')\n        }\n    \n    def get_weather_icon(self, weather_description: str, temperature: int) -> str:\n        \"\"\"根據天氣描述和溫度返回對應的emoji icon\"\"\"\n        weather_desc = weather_description.lower()\n        \n        # 根據關鍵字判斷天氣icon\n        if '晴' in weather_desc or '陽' in weather_desc:\n            return '☀️'\n        elif '雲' in weather_desc or '陰' in weather_desc:\n            if '多雲' in weather_desc:\n                return '⛅'\n            else:\n                return '☁️'\n        elif '雨' in weather_desc:\n            if '大雨' in weather_desc or '豪雨' in weather_desc:\n                return '🌧️'\n            elif '小雨' in weather_desc:\n                return '🌦️'\n            else:\n                return '🌧️'\n        elif '雷' in weather_desc:\n            return '⛈️'\n        elif '雪' in weather_desc:\n            return '❄️'\n        elif '霧' in weather_desc:\n            return '🌫️'\n        else:\n            # 根據溫度判斷\n            if temperature >= 30:\n                return '☀️'\n            elif temperature >= 25:\n                return '⛅'\n            else:\n                return '☁️'\n    \n    def get_available_districts(self) -> List[str]:\n        \"\"\"獲取可用的地區列表\"\"\"\n        return list(self.districts_weather.keys())\n    \n    def get_hourly_forecast(self, district: str = '中正區', hours: int = 24) -> List[Dict[str, Any]]:\n        \"\"\"\n        獲取指定地區的小時預報\n        \n        Args:\n            district: 地區名稱\n            hours: 預報小時數\n            \n        Returns:\n            小時預報列表\n        \"\"\"\n        if district not in self.districts_weather:\n            return []\n        \n        district_data = self.districts_weather[district]\n        weather_elements = district_data['weather_elements']\n        forecast_list = []\n        \n        try:\n            if '溫度' in weather_elements:\n                temp_data = weather_elements['溫度']\n                \n                for i, data_point in enumerate(temp_data[:hours]):\n                    time_str = data_point.get('DataTime', '')\n                    temp_value = data_point.get('ElementValue', [{}])[0].get('Temperature', '25')\n                    \n                    try:\n                        forecast_time = datetime.fromisoformat(time_str.replace('+08:00', ''))\n                        temp = int(temp_value)\n                        \n                        forecast_list.append({\n                            'time': forecast_time.strftime('%H:%M'),\n                            'date': forecast_time.strftime('%m/%d'),\n                            'temperature': temp,\n                            'hour': forecast_time.hour\n                        })\n                    except:\n                        continue\n            \n        except Exception as e:\n            print(f\"獲取小時預報時發生錯誤: {e}\")\n        \n        return forecast_list","size_bytes":12952}},"version":1}